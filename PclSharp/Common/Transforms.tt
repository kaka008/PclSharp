<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#@include file="..\Manager.ttinclude"#>
<#@include file="..\InvokeTemplate.ttinclude"#>
<# 
	var ClassName = "Transforms";
	var classname = ClassName.ToLower();
	var classFunc = "transforms";
	var cppWrapper = "Transforms";

	var i = new InvokeT(classFunc, "Transforms", cppWrapper);
#>
// Code generated by a template
using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using PclSharp.Std;
namespace PclSharp.Common
{

	public static partial class Invoke
	{
		<#= i.FuncS("void", "transformPointCloud", "IntPtr cloud_in,IntPtr cloud_out,IntPtr transform, [MarshalAs(UnmanagedType.I1)] bool copy_all_fields") #>
	}

	public  class Transforms 
	{
		public static void TransformPointCloud(PointCloudOfXYZ cloud_in,ref PointCloudOfXYZ cloud_out,Eigen.Matrix4f transform,bool copy_all_fields=false)
		{
			<#=i.InvokeS("transformPointCloud", "cloud_in.Ptr,cloud_out.Ptr,transform.Ptr,copy_all_fields")#>;
		}
	}
}
<#
	var manager = Manager.Create(Host, GenerationEnvironment);
	manager.StartNewFile("..\\..\\PclSharp.Extern\\common\\Transforms.generated.cpp");
#>
// Code generated by a template
#pragma once
#include "..\export.h"
#include <pcl/common/transforms.h>

using namespace pcl;
using namespace std;

#ifdef __cplusplus
extern "C" {
#endif


<#=i.ExportS("void", "transformPointCloud", "const PointCloud<PointXYZ> &cloud_in,PointCloud<PointXYZ> &cloud_out,const Eigen::Matrix4f &transform,bool copy_all_fields")#>
{
	pcl::transformPointCloud(cloud_in,cloud_out,transform,copy_all_fields);
}

#ifdef __cplusplus  
}
#endif
<# i.Dispose(); manager.EndBlock(false); manager.Process(true); #>