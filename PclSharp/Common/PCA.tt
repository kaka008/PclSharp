<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#@include file="..\Manager.ttinclude"#>
<#@include file="..\InvokeTemplate.ttinclude"#>
<# 
	var manager = Manager.Create(Host, GenerationEnvironment);
	outputClass(manager, "XYZ", "PointXYZ", "PointXYZ");
	manager.Process(true);
#>
// Code generated by a template
using PclSharp.Common;
using PclSharp.Search;
using PclSharp.Std;
using PclSharp.Struct;
using System.Numerics;

namespace PclSharp.Common
{
	public class PCA
	{
		public enum Flag
		{
			Increase,
			Preserve
		}
	}

	public abstract class PCA<PointT> : PclBase<PointT>
	{
		public abstract Vector4 Mean { get; }
		public abstract Vector3 EigenValues { get; }

		public abstract void Update(PointT input, PCA.Flag flag = PCA.Flag.Preserve);
	}
}
<#+ void outputClass(Manager manager, string ClassName, string csin, string cppin)
{ 
	var classname = ClassName.ToLower();
	var classFunc = "pca_" + classname;
	
	var cppWrapper = "PCA<"+cppin+">";

	manager.StartNewFile("PCAOf"+ClassName+".generated.cs");
	var i = new InvokeT(classFunc, csin, cppWrapper);
	i.Var("cppin", cppin);
	i.Var("cppWrapper", cppWrapper);
#>
// Code generated by a template
using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using PclSharp.Struct;
using PclSharp.Std;
using System.Numerics;

namespace PclSharp.Common
{
	public static partial class Invoke
	{
		<#= i.Func("IntPtr", "ctor", "bool basisOnly") #>
		<#= i.Delete() #>

		//methods
		<#=i.FuncI("setInputCloud", "IntPtr cloud")#>
		<#=i.FuncI("setIndices", "IntPtr indices")#>
		<#=i.FuncI("unsafe void", "update", "csClass* input, PCA.Flag flag")#>

		//properties
		<#=i.FuncI("Vector4", "getMean", "")#>
		<#=i.FuncI("Vector3", "getEigenValues", "")#>
	}

	public class PCAOf<#=ClassName#> : PCA<<#=csin#>>
	{
		public override Vector4 Mean
			=> <#=i.InvokeI("getMean", "")#>;

		public override Vector3 EigenValues
			=> <#=i.InvokeI("getEigenValues", "")#>;
		
		public PCAOf<#=ClassName#>(bool basisOnly = false)
		{
			_ptr = <#=i.Invoke("ctor", "basisOnly")#>;
		}

		public override void SetInputCloud(PointCloud<<#=csin#>> cloud)
			=> <#=i.InvokeI("setInputCloud", "cloud")#>;

		public override void SetIndices(VectorOfInt indices)
			=> <#=i.InvokeI("setIndices", "indices")#>;

		public override unsafe void Update(<#=csin#> input, PCA.Flag flag = PCA.Flag.Preserve)
			=> <#=i.InvokeI("update", "&input, flag")#>;

		public override ref <#=csin#> this[int idx]
		{
			get { return ref this.Index(idx); }
		}

		protected override void DisposeObject()
		{
			<#=i.DeleteI()#>;
		}
	}
}
<#+ 
	manager.EndBlock(); 
	manager.StartNewFile("..\\..\\PclSharp.Extern\\common\\PCAOf"+ClassName+".generated.cpp");
#>
// Code generated by a template
#pragma once
#include "..\export.h"

#include <pcl/point_types.h>
#include <pcl/common/pca.h>

using namespace pcl;
using namespace std;

typedef boost::shared_ptr<PointCloud<<#=cppin#>>> boost_cloud;
typedef boost::shared_ptr<vector<int>> boost_indices;

#ifdef __cplusplus
extern "C" {
#endif 

<#=i.Export("cppWrapper*", "ctor", "int basisOnly")#>
{ return new <#=cppWrapper#>(basisOnly); }

<#=i.Export("void", "delete", "cppWrapper** ptr")#>
{
	delete *ptr;
	*ptr = NULL;
}

<#=i.ExportI("void", "setInputCloud", "PointCloud<cppin>* cloud")#>
{ ptr->setInputCloud(boost_cloud(boost_cloud(), cloud)); }

<#= i.ExportI("void", "setIndices", "std::vector<int>* indices")#>
{ ptr->setIndices(boost_indices(boost_indices(), indices)); }

<#=i.ExportI("void", "update", "cppin* input, PCA<cppin>::FLAG flag")#>
{ ptr->update(*input, flag); }

<#=i.ExportI("Eigen::Vector4f", "getMean", "")#>
{ return ptr->getMean(); }

<#=i.ExportI("Eigen::Vector3f", "getEigenValues", "")#>
{ return ptr->getEigenValues(); }

#ifdef __cplusplus  
}
#endif  
<#+	i.Dispose(); manager.EndBlock(false); }#>