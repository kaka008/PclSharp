<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#@include file="..\Manager.ttinclude"#>
<#@include file="..\InvokeTemplate.ttinclude"#>
<# 
	var ClassName = "PLYeader";
	var classname = ClassName.ToLower();
	var classFunc = "io_plyreader";
	var cppWrapper = "PLYReader";
	

	var i = new InvokeT(classFunc, "PLYReader", cppWrapper);
#>
// Code generated by a template
using System;
using System.Collections.Generic;
using System.Numerics;
using System.Runtime.InteropServices;
using PclSharp.Struct;
using PclSharp.Std;
namespace PclSharp.IO
{
	public static partial class Invoke
	{
		<#= i.Ctor() #>
		<#= i.Delete() #>

		<#= i.FuncI("int", "read_xyz", "string fileName, IntPtr cloud, int offset") #>
		<#= i.FuncI("int", "read_xyzrgba", "string fileName, IntPtr cloud, int offset") #>
	}

	public class PLYReader : UnmanagedObject
	{
		public PLYReader()
		{
			_ptr = <#=i.Invoke("ctor")#>;
		}

		public int Read(string fileName, PointCloud<PointXYZ> cloud, int offset=0)
		{
			var res = <#=i.InvokeI("read_xyz", "fileName, cloud.Ptr, offset")#>;
			return res;
		}

		public int Read(string fileName, PointCloud<PointXYZRGBA> cloud, int offset=0)
		{
			return <#=i.InvokeI("read_xyzrgba", "fileName, cloud, offset")#>;
		}

		protected override void DisposeObject()
		{
			<#=i.DeleteI()#>;
		}
	}
}
<#
	var manager = Manager.Create(Host, GenerationEnvironment);
	manager.StartNewFile("..\\..\\PclSharp.Extern\\io\\PLYReader.generated.cpp");
#>
// Code generated by a template
#pragma once
#include "..\export.h"
#include <pcl/io/ply_io.h>
#include <pcl/point_types.h>

using namespace pcl;
using namespace std;

#ifdef __cplusplus
extern "C" {
#endif

<#=i.Export("PLYReader*", "ctor", "")#>
{
	return new PLYReader();
}

<#=i.Export("void", "delete", "PLYReader** ptr")#>
{
	delete *ptr;
	*ptr = NULL;
}

<#=i.ExportI("int32_t", "read_xyz", "const char* str, PointCloud<PointXYZ>* cloud, int offset")#>
{
	return ptr->read(string(str), *cloud, offset);
}
<#=i.ExportI("int32_t", "read_xyzrgba", "const char* str, PointCloud<PointXYZRGBA>* cloud, int offset")#>
{ return ptr->read(string(str), *cloud, offset); }


#ifdef __cplusplus  
}
#endif
<# i.Dispose(); manager.EndBlock(false); manager.Process(true); #>