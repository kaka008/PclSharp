<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#@include file="Manager.ttinclude"#>
<#@include file="InvokeTemplate.ttinclude"#>
<# 
	var ClassName = "PointIndices";
	var classname = ClassName.ToLower();
	var classFunc = "pointindices";
	var cppWrapper = "PointIndices";

	var i = new InvokeT(classFunc, "PointIndices", cppWrapper);
#>
// Code generated by a template
using System;
using System.Collections.Generic;
using System.Numerics;
using System.Runtime.InteropServices;
using PclSharp.Std;
namespace PclSharp
{
	public static partial class Invoke
	{
		<#= i.Ctor() #>
		<#= i.Delete() #>

		<#= i.FuncI("IntPtr", "indices", "") #>
	}

	public class PointIndices : UnmanagedObject
	{
		private bool _suppressDispose;

		public VectorOfInt Indices { get; }

		public PointIndices()
		{
			_ptr = <#=i.Invoke("ctor")#>;
			Indices = new VectorOfInt(<#=i.InvokeI("indices")#>);
		}

		internal PointIndices(IntPtr ptr)
		{
			_ptr = ptr;
			Indices = new VectorOfInt(<#=i.InvokeI("indices")#>);

			_suppressDispose = true;
		}

		protected override void DisposeObject()
		{
			if (_suppressDispose)
				return;

			<#=i.DeleteI()#>;
		}
	}
}
<#
	var manager = Manager.Create(Host, GenerationEnvironment);
	manager.StartNewFile("..\\PclSharp.Extern\\common\\PointIndices.generated.cpp");
#>
// Code generated by a template
#pragma once
#include "..\export.h"
#include <pcl/PointIndices.h>

using namespace pcl;
using namespace std;

#ifdef __cplusplus
extern "C" {
#endif

<#=i.Export("PointIndices*", "ctor", "")#>
{
	return new PointIndices();
}

<#=i.Export("void", "delete", "PointIndices** ptr")#>
{
	delete *ptr;
	*ptr = NULL;
}

<#=i.ExportI("vector<int>*", "indices", "")#>
{
	return &ptr->indices;
}

#ifdef __cplusplus  
}
#endif
<# i.Dispose(); manager.EndBlock(false); manager.Process(true); #>