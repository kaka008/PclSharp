// Code generated by a template
using System;
using System.Collections.Generic;
using System.Numerics;
using System.Runtime.InteropServices;
using PclSharp.Struct;
using PclSharp.Std;
using PclSharp.Search;

namespace PclSharp.Surface
{
	public static partial class Invoke
	{
		[DllImport(Native.DllName, CallingConvention=Native.CallingConvention)]
		public static extern IntPtr surface_convexhull_xyz_ctor();
		[DllImport(Native.DllName, CallingConvention=Native.CallingConvention)]
		public static extern void surface_convexhull_xyz_delete(ref IntPtr ptr);
		//methods
		[DllImport(Native.DllName, CallingConvention=Native.CallingConvention)]
		public static extern void surface_convexhull_xyz_setInputCloud(IntPtr ptr, IntPtr cloud);
		[DllImport(Native.DllName, CallingConvention=Native.CallingConvention)]
		public static extern void surface_convexhull_xyz_setIndices(IntPtr ptr, IntPtr indices);
		[DllImport(Native.DllName, CallingConvention=Native.CallingConvention)]
		public static extern void surface_convexhull_xyz_setSearchMethod(IntPtr ptr, IntPtr search);
		[DllImport(Native.DllName, CallingConvention=Native.CallingConvention)]
		public static extern void surface_convexhull_xyz_reconstruct(IntPtr ptr, IntPtr mesh);

		[DllImport(Native.DllName, CallingConvention=Native.CallingConvention)]
		public static extern double surface_convexhull_xyz_getTotalArea(IntPtr ptr);
		[DllImport(Native.DllName, CallingConvention=Native.CallingConvention)]
		public static extern double surface_convexhull_xyz_getTotalVolume(IntPtr ptr);
		[DllImport(Native.DllName, CallingConvention=Native.CallingConvention)]
		public static extern void surface_convexhull_xyz_setComputeAreaVolume(IntPtr ptr, bool value);
		[DllImport(Native.DllName, CallingConvention=Native.CallingConvention)]
		public static extern void surface_convexhull_xyz_getHullPointIndices(IntPtr ptr, IntPtr hullIndices);
		[DllImport(Native.DllName, CallingConvention=Native.CallingConvention)]
		public static extern void surface_convexhull_xyz_setDimension(IntPtr ptr, int value);
		[DllImport(Native.DllName, CallingConvention=Native.CallingConvention)]
		public static extern int surface_convexhull_xyz_getDimension(IntPtr ptr);
	}

	public class ConvexHullOfXYZ : ConvexHull<PointXYZ>
	{
		public override double TotalArea
			=> Invoke.surface_convexhull_xyz_getTotalArea(_ptr);

		public override double TotalVolume
			=> Invoke.surface_convexhull_xyz_getTotalVolume(_ptr);

		public override bool ComputeAreaVolume
		{
			set { Invoke.surface_convexhull_xyz_setComputeAreaVolume(_ptr, value); }
		}

		public override int Dimension
		{
			get { return Invoke.surface_convexhull_xyz_getDimension(_ptr); }
            set { Invoke.surface_convexhull_xyz_setDimension(_ptr, value); }
		}

		public ConvexHullOfXYZ()
		{
			_ptr = Invoke.surface_convexhull_xyz_ctor();
		}

		public override void SetInputCloud(PointCloud<PointXYZ> cloud)
			=> Invoke.surface_convexhull_xyz_setInputCloud(_ptr, cloud);

		public override void SetIndices(VectorOfInt indices)
			=> Invoke.surface_convexhull_xyz_setIndices(_ptr, indices);

		public override ref PointXYZ this[int idx]
		{
			get { return ref this.Index(idx); }
		}

		public override void SetSearchMethod(Search<PointXYZ> search)
			=> Invoke.surface_convexhull_xyz_setSearchMethod(_ptr, search);

		public override void Reconstruct(PolygonMesh mesh)
			=> Invoke.surface_convexhull_xyz_reconstruct(_ptr, mesh);

		public override void GetHullPointIndices(PointIndices indices)
			=> Invoke.surface_convexhull_xyz_getHullPointIndices(_ptr, indices);

		protected override void DisposeObject()
		{
			Invoke.surface_convexhull_xyz_delete(ref _ptr);
		}
	}
}
