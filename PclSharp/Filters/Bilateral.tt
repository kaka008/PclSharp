<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#@include file="..\Manager.ttinclude"#>
<#@include file="..\InvokeTemplate.ttinclude"#>
<# 
	var manager = Manager.Create(Host, GenerationEnvironment);
	outputClass(manager, "XYZ", "PointXYZ", "PointXYZ");
	manager.Process(true);
#>

// Code generated by a template
using PclSharp.Std;
using PclSharp.Search;
namespace PclSharp.Filters
{
	public abstract class BilateralFilter<PointT> : Filter<PointT>
	{
		public abstract double HalfSize { get; set; }
		public abstract double StdDev { get; set; }
		public abstract double ComputePointWeight(int pid,VectorOfInt indices,VectorOfFloat distance);
		public abstract void SetSearchMethod(KdTree<PointT>  tree);
		
	}
}
<#+ void outputClass(Manager manager, string ClassName, string csin, string cppin)
{ 
	var classname = ClassName.ToLower();
	var classFunc = "filters_bilateralFilter_" + classname;
	
	var cppWrapper = "BilateralFilter<"+cppin+">";

	manager.StartNewFile("BilateralFilterOf"+ClassName+".generated.cs");
	var i = new InvokeT(classFunc, csin, cppWrapper);
	i.Var("cppin", cppin);
#>
// Code generated by a template
using System;
using System.Collections.Generic;
using System.Numerics;
using System.Runtime.InteropServices;
using PclSharp.Struct;
using PclSharp.Std;
using PclSharp.Search;
namespace PclSharp.Filters
{
	public static partial class Invoke
	{
		<#= i.Func("IntPtr", "ctor", "") #>
		<#= i.Delete() #>
		//methods
		<#=i.FuncI("filter", "IntPtr output")#>
		<#=i.FuncI("setInputCloud", "IntPtr cloud")#>
		<#=i.FuncI("setIndices", "IntPtr indices")#>
		<#=i.FuncI("double","computePointWeight", "int pid,VectorOfInt indices,VectorOfFloat distance")#>
		<#=i.FuncI("setSearchMethod", "KdTree<PointXYZ> tree")#>

		//properties
		<#=i.Prop("HalfSize", "double")#>
		<#=i.Prop("StdDev", "double")#>
	}

	public class BilateralFilterOf<#=ClassName#> : BilateralFilter<<#=csin#>>
	{
		public override double HalfSize
		{
			<#=i.InvokeP("HalfSize", "double")#>
		}

		public override double StdDev
		{
			<#=i.InvokeP("StdDev", "double")#>
		}


		public BilateralFilterOf<#=ClassName#>()
		{
			_ptr = <#=i.Invoke("ctor", "")#>;
		}

		public override void SetInputCloud(PointCloud<<#=csin#>> cloud)
		{
			<#=i.InvokeI("setInputCloud", "cloud")#>;
		}

		public override void filter(PointCloud<<#=csin#>> output)
		{
			<#=i.InvokeI("filter", "output.Ptr")#>;
		}

		public override void SetIndices(VectorOfInt indices)
		{
			<#=i.InvokeI("setIndices", "indices")#>;
		}

		public override double ComputePointWeight(int pid,VectorOfInt indices,VectorOfFloat distance)
		{
		     return	<#=i.InvokeI("computePointWeight", "pid,indices,distance")#>;
		}

		public override void SetSearchMethod(KdTree<PointXYZ> tree)
		{
			<#=i.InvokeI("setSearchMethod", "tree")#>;
		}

		public override ref <#=csin#> this[int idx]
		{
			get { return ref this.Index(idx); }
		}

		protected override void DisposeObject()
		{
			<#=i.DeleteI()#>;
		}
	}
}
<#+ 
	manager.EndBlock(); 
	manager.StartNewFile("..\\..\\PclSharp.Extern\\filters\\BilateralFilterOf"+ClassName+".generated.cpp");
#>
// Code generated by a template
#pragma once
#include "..\export.h"

#include "pcl\pcl_base.h"
#include "pcl\point_types.h"
#include <pcl/filters/bilateral.h>

using namespace pcl;
using namespace std;

typedef <#=cppWrapper#> filter_t;
typedef std::shared_ptr<PointCloud<<#=cppin#>>> std_cloud;
typedef typename std::shared_ptr<pcl::search::Search<pcl::PointXYZ>> KdTreePtr;

#ifdef __cplusplus
extern "C" {
#endif 

/*<#=i.Export("filter_t*", "ctor", "")#>
{
	return new filter_t();
}*/

<#=i.Export("void", "delete", "filter_t** ptr")#>
{
	delete *ptr;
	*ptr = NULL;
}

<#=i.ExportI("void", "filter", "PointCloud<cppin>* output")#>
{
	ptr->filter(*output);
}

<#=i.ExportI("void", "setInputCloud", "PointCloud<cppin>* cloud")#>
{
	ptr->setInputCloud(std_cloud(std_cloud(), cloud));
}
<#=i.ExportI("void", "setIndices", "vector<int>* indices")#>
{
	ptr->setIndices(std::shared_ptr<vector<int>>(std::shared_ptr<vector<int>>(), indices));
}
/*<#=i.ExportI("double", "computePointWeight", "const int &pid,const vector<int> &indices,const vector<float> &distance")#>
{
	return ptr->computePointWeight(pid,indices,distance);
}*/
<#=i.ExportI("void", "setSearchMethod", "const KdTreePtr &tree")#>
{
	ptr->setSearchMethod(tree);
}

<#=i.ExportP("HalfSize", "double")#>

<#=i.ExportP("StdDev", "double")#>


#ifdef __cplusplus  
}
#endif  
<#+ i.Dispose(); manager.EndBlock(false); }#>