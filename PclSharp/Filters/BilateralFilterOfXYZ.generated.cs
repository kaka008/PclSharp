// Code generated by a template
using System;
using System.Collections.Generic;
using System.Numerics;
using System.Runtime.InteropServices;
using PclSharp.Struct;
using PclSharp.Std;
using PclSharp.Search;
namespace PclSharp.Filters
{
	public static partial class Invoke
	{
		[DllImport(Native.DllName, CallingConvention=Native.CallingConvention)]
		public static extern IntPtr filters_bilateralFilter_xyz_ctor();
		[DllImport(Native.DllName, CallingConvention=Native.CallingConvention)]
		public static extern void filters_bilateralFilter_xyz_delete(ref IntPtr ptr);
		//methods
		[DllImport(Native.DllName, CallingConvention=Native.CallingConvention)]
		public static extern void filters_bilateralFilter_xyz_filter(IntPtr ptr, IntPtr output);
		[DllImport(Native.DllName, CallingConvention=Native.CallingConvention)]
		public static extern void filters_bilateralFilter_xyz_setInputCloud(IntPtr ptr, IntPtr cloud);
		[DllImport(Native.DllName, CallingConvention=Native.CallingConvention)]
		public static extern void filters_bilateralFilter_xyz_setIndices(IntPtr ptr, IntPtr indices);
		[DllImport(Native.DllName, CallingConvention=Native.CallingConvention)]
		public static extern double filters_bilateralFilter_xyz_computePointWeight(IntPtr ptr, int pid,VectorOfInt indices,VectorOfFloat distance);
		[DllImport(Native.DllName, CallingConvention=Native.CallingConvention)]
		public static extern void filters_bilateralFilter_xyz_setSearchMethod(IntPtr ptr, KdTree<PointXYZ> tree);

		//properties
		[DllImport(Native.DllName, CallingConvention=Native.CallingConvention)]
		public static extern void filters_bilateralFilter_xyz_setHalfSize(IntPtr ptr, double value);
		[DllImport(Native.DllName, CallingConvention=Native.CallingConvention)]
		public static extern double filters_bilateralFilter_xyz_getHalfSize(IntPtr ptr);
		[DllImport(Native.DllName, CallingConvention=Native.CallingConvention)]
		public static extern void filters_bilateralFilter_xyz_setStdDev(IntPtr ptr, double value);
		[DllImport(Native.DllName, CallingConvention=Native.CallingConvention)]
		public static extern double filters_bilateralFilter_xyz_getStdDev(IntPtr ptr);
	}

	public class BilateralFilterOfXYZ : BilateralFilter<PointXYZ>
	{
		public override double HalfSize
		{
			get { return Invoke.filters_bilateralFilter_xyz_getHalfSize(_ptr); }
            set { Invoke.filters_bilateralFilter_xyz_setHalfSize(_ptr, value); }
		}

		public override double StdDev
		{
			get { return Invoke.filters_bilateralFilter_xyz_getStdDev(_ptr); }
            set { Invoke.filters_bilateralFilter_xyz_setStdDev(_ptr, value); }
		}


		public BilateralFilterOfXYZ()
		{
			_ptr = Invoke.filters_bilateralFilter_xyz_ctor();
		}

		public override void SetInputCloud(PointCloud<PointXYZ> cloud)
		{
			Invoke.filters_bilateralFilter_xyz_setInputCloud(_ptr, cloud);
		}

		public override void filter(PointCloud<PointXYZ> output)
		{
			Invoke.filters_bilateralFilter_xyz_filter(_ptr, output.Ptr);
		}

		public override void SetIndices(VectorOfInt indices)
		{
			Invoke.filters_bilateralFilter_xyz_setIndices(_ptr, indices);
		}

		public override double ComputePointWeight(int pid,VectorOfInt indices,VectorOfFloat distance)
		{
		     return	Invoke.filters_bilateralFilter_xyz_computePointWeight(_ptr, pid,indices,distance);
		}

		public override void SetSearchMethod(KdTree<PointXYZ> tree)
		{
			Invoke.filters_bilateralFilter_xyz_setSearchMethod(_ptr, tree);
		}

		public override ref PointXYZ this[int idx]
		{
			get { return ref this.Index(idx); }
		}

		protected override void DisposeObject()
		{
			Invoke.filters_bilateralFilter_xyz_delete(ref _ptr);
		}
	}
}
