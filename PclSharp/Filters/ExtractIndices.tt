<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#@include file="..\Manager.ttinclude"#>
<#@include file="..\InvokeTemplate.ttinclude"#>
<# 
	var manager = Manager.Create(Host, GenerationEnvironment);
	outputClass(manager, "XYZ", "PointXYZ", "PointXYZ");
	manager.Process(true);
#>
// Code generated by a template
namespace PclSharp.Filters
{
	public abstract class ExtractIndices<PointT> : FilterIndices<PointT>
	{
	}
}
<#+ void outputClass(Manager manager, string ClassName, string csin, string cppin)
{ 
	var classname = ClassName.ToLower();
	var classFunc = "filters_extractIndices_" + classname;
	
	var cppWrapper = "ExtractIndices<"+cppin+">";

	manager.StartNewFile("ExtractIndicesOf"+ClassName+".generated.cs");
	var i = new InvokeT(classFunc, csin, cppWrapper);
	i.Var("cppin", cppin);
#>
// Code generated by a template
using System;
using System.Collections.Generic;
using System.Numerics;
using System.Runtime.InteropServices;
using PclSharp.Struct;
using PclSharp.Std;
namespace PclSharp.Filters
{
	public static partial class Invoke
	{
		<#= i.Func("IntPtr", "ctor", "[MarshalAs(UnmanagedType.I1)]bool extractRemovedIndices") #>
		<#= i.Delete() #>
		//methods
		<#=i.FuncI("filter", "IntPtr output")#>
		<#=i.FuncI("setInputCloud", "IntPtr cloud")#>
		<#=i.FuncI("setIndices", "IntPtr indices")#>

		//properties
		<#=i.Prop("KeepOrganized", "bool")#>
		<#=i.Prop("Negative", "bool")#>
	}

	public class ExtractIndicesOf<#=ClassName#> : ExtractIndices<<#=csin#>>
	{
		public override bool Negative
		{
			<#=i.InvokeP("Negative", "bool")#>
		}

		public override bool KeepOrganized
		{
			<#=i.InvokeP("KeepOrganized", "bool")#>
		}

		public ExtractIndicesOf<#=ClassName#>(bool extractRemovedIndices = false)
		{
			_ptr = <#=i.Invoke("ctor", "extractRemovedIndices")#>;
		}

		public override void SetInputCloud(PointCloud<<#=csin#>> cloud)
		{
			<#=i.InvokeI("setInputCloud", "cloud")#>;
		}

		public override void filter(PointCloud<<#=csin#>> output)
		{
			<#=i.InvokeI("filter", "output.Ptr")#>;
		}

		public override void SetIndices(VectorOfInt indices)
		{
			<#=i.InvokeI("setIndices", "indices")#>;
		}

		public override ref <#=csin#> this[int idx]
		{
			get { return ref this.Index(idx); }
		}

		protected override void DisposeObject()
		{
			<#=i.DeleteI()#>;
		}
	}
}
<#+ 
	manager.EndBlock(); 
	manager.StartNewFile("..\\..\\PclSharp.Extern\\filters\\ExtractIndices"+ClassName+".generated.cpp");
#>
// Code generated by a template
#pragma once
#include "..\export.h"

#include "pcl\pcl_base.h"
#include "pcl\point_types.h"
#include <pcl/filters/extract_indices.h>

using namespace pcl;
using namespace std;

typedef <#=cppWrapper#> filter_t;
typedef boost::shared_ptr<PointCloud<<#=cppin#>>> boost_cloud;

#ifdef __cplusplus
extern "C" {
#endif 

<#=i.Export("filter_t*", "ctor", "bool extractRemovedIndices")#>
{
	return new filter_t(extractRemovedIndices);
}

<#=i.Export("void", "delete", "filter_t** ptr")#>
{
	delete *ptr;
	*ptr = NULL;
}

<#=i.ExportI("void", "filter", "PointCloud<cppin>* output")#>
{
	ptr->filter(*output);
}

<#=i.ExportI("void", "setInputCloud", "PointCloud<cppin>* cloud")#>
{
	ptr->setInputCloud(boost_cloud(boost_cloud(), cloud));
}

<#=i.ExportI("void", "setIndices", "vector<int>* indices")#>
{
	ptr->setIndices(boost::shared_ptr<vector<int>>(boost::shared_ptr<vector<int>>(), indices));
}

<#=i.ExportP("KeepOrganized", "int")#>

<#=i.ExportP("Negative", "int")#>

#ifdef __cplusplus  
}
#endif  
<#+ i.Dispose(); manager.EndBlock(false); }#>