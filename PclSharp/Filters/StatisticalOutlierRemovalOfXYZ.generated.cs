// Code generated by a template
using System;
using System.Collections.Generic;
using System.Numerics;
using System.Runtime.InteropServices;
using PclSharp.Struct;
using PclSharp.Std;
namespace PclSharp.Filters
{
	public static partial class Invoke
	{
		[DllImport(Native.DllName, CallingConvention=Native.CallingConvention)]
		public static extern IntPtr filters_statisticalOutlierRemoval_xyz_ctor([MarshalAs(UnmanagedType.I1)]bool extractRemovedIndices);
		[DllImport(Native.DllName, CallingConvention=Native.CallingConvention)]
		public static extern void filters_statisticalOutlierRemoval_xyz_delete(ref IntPtr ptr);
		//methods
		[DllImport(Native.DllName, CallingConvention=Native.CallingConvention)]
		public static extern void filters_statisticalOutlierRemoval_xyz_filter(IntPtr ptr, IntPtr output);
		[DllImport(Native.DllName, CallingConvention=Native.CallingConvention)]
		public static extern void filters_statisticalOutlierRemoval_xyz_setInputCloud(IntPtr ptr, IntPtr cloud);
		[DllImport(Native.DllName, CallingConvention=Native.CallingConvention)]
		public static extern void filters_statisticalOutlierRemoval_xyz_setIndices(IntPtr ptr, IntPtr indices);

		//properties
		[DllImport(Native.DllName, CallingConvention=Native.CallingConvention)]
		public static extern void filters_statisticalOutlierRemoval_xyz_setKeepOrganized(IntPtr ptr, bool value);
		[DllImport(Native.DllName, CallingConvention=Native.CallingConvention)]
		public static extern bool filters_statisticalOutlierRemoval_xyz_getKeepOrganized(IntPtr ptr);
		[DllImport(Native.DllName, CallingConvention=Native.CallingConvention)]
		public static extern void filters_statisticalOutlierRemoval_xyz_setNegative(IntPtr ptr, bool value);
		[DllImport(Native.DllName, CallingConvention=Native.CallingConvention)]
		public static extern bool filters_statisticalOutlierRemoval_xyz_getNegative(IntPtr ptr);
		[DllImport(Native.DllName, CallingConvention=Native.CallingConvention)]
		public static extern void filters_statisticalOutlierRemoval_xyz_setMeanK(IntPtr ptr, int value);
		[DllImport(Native.DllName, CallingConvention=Native.CallingConvention)]
		public static extern int filters_statisticalOutlierRemoval_xyz_getMeanK(IntPtr ptr);
		[DllImport(Native.DllName, CallingConvention=Native.CallingConvention)]
		public static extern void filters_statisticalOutlierRemoval_xyz_setStddevMulThresh(IntPtr ptr, double value);
		[DllImport(Native.DllName, CallingConvention=Native.CallingConvention)]
		public static extern double filters_statisticalOutlierRemoval_xyz_getStddevMulThresh(IntPtr ptr);
	}

	public class StatisticalOutlierRemovalOfXYZ : StatisticalOutlierRemoval<PointXYZ>
	{
		public override int MeanK
		{
			get { return Invoke.filters_statisticalOutlierRemoval_xyz_getMeanK(_ptr); }
            set { Invoke.filters_statisticalOutlierRemoval_xyz_setMeanK(_ptr, value); }
		}

		public override double StdDevMulThresh
		{
			get { return Invoke.filters_statisticalOutlierRemoval_xyz_getStddevMulThresh(_ptr); }
            set { Invoke.filters_statisticalOutlierRemoval_xyz_setStddevMulThresh(_ptr, value); }
		}

		public override bool Negative
		{
			get { return Invoke.filters_statisticalOutlierRemoval_xyz_getNegative(_ptr); }
            set { Invoke.filters_statisticalOutlierRemoval_xyz_setNegative(_ptr, value); }
		}

		public override bool KeepOrganized
		{
			get { return Invoke.filters_statisticalOutlierRemoval_xyz_getKeepOrganized(_ptr); }
            set { Invoke.filters_statisticalOutlierRemoval_xyz_setKeepOrganized(_ptr, value); }
		}

		public StatisticalOutlierRemovalOfXYZ(bool extractRemovedIndices = false)
		{
			_ptr = Invoke.filters_statisticalOutlierRemoval_xyz_ctor(extractRemovedIndices);
		}

		public override void SetInputCloud(PointCloud<PointXYZ> cloud)
		{
			Invoke.filters_statisticalOutlierRemoval_xyz_setInputCloud(_ptr, cloud);
		}

		public override void filter(PointCloud<PointXYZ> output)
		{
			Invoke.filters_statisticalOutlierRemoval_xyz_filter(_ptr, output.Ptr);
		}

		public override void SetIndices(VectorOfInt indices)
		{
			Invoke.filters_statisticalOutlierRemoval_xyz_setIndices(_ptr, indices);
		}

		public override ref PointXYZ this[int idx]
		{
			get { return ref this.Index(idx); }
		}

		protected override void DisposeObject()
		{
			Invoke.filters_statisticalOutlierRemoval_xyz_delete(ref _ptr);
		}
	}
}
