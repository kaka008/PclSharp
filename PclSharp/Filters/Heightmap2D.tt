<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#@include file="..\Manager.ttinclude"#>
<#@include file="..\InvokeTemplate.ttinclude"#>
<# 
	var manager = Manager.Create(Host, GenerationEnvironment);
	outputClass(manager, "XYZ", "PointXYZ", "PointXYZ");
	manager.Process(true);
#>
// Code generated by a template
namespace PclSharp.Filters
{
	public abstract class Heightmap2D<PointT> : Filter<PointT>
	{
		public abstract float BinSize { get; set; }
		public abstract float MinDistBetweenMaxima { get; set; }
		public abstract int MaximaNumberAfterFiltering { get; }
		public abstract Std.VectorOfInt MaximaCloudIndicesFiltered { get; }

		public abstract void SetGroundCoeffs(Eigen.VectorXf coeffs);
	}
}
<#+ void outputClass(Manager manager, string ClassName, string csin, string cppin)
{ 
	var classname = ClassName.ToLower();
	var classFunc = "filters_heightmap2d_" + classname;
	
	var cppWrapper = "HeightMap2D<"+cppin+">";

	manager.StartNewFile("HeightMap2DOf"+ClassName+".generated.cs");
	var i = new InvokeT(classFunc, csin, cppWrapper);
	i.Var("cppin", cppin);
#>
// Code generated by a template
using System;
using System.Collections.Generic;
using System.Numerics;
using System.Runtime.InteropServices;
using PclSharp.Struct;
using PclSharp.Std;
namespace PclSharp.Filters
{
	public static partial class Invoke
	{
		<#= i.Ctor() #>
		<#= i.Delete() #>
		//methods
		<#=i.FuncI("filter", "IntPtr output")#>
		<#=i.FuncI("setInputCloud", "IntPtr cloud")#>
		<#=i.FuncI("setIndices", "IntPtr indices")#>

		<#=i.FuncI("setGroundCoeffs", "IntPtr coeffs")#>
		<#=i.FuncI("int", "getMaximaNumberAfterFiltering", "")#>
		<#=i.FuncI("IntPtr", "getMaximaCloudIndicesFiltered", "")#>

		<#=i.Prop("BinSize", "float")#>
		<#=i.Prop("MinDistBetweenMaxima", "float")#>
	}

	public class HeightMap2DOf<#=ClassName#> : Heightmap2D<<#=csin#>>
	{
		public HeightMap2DOf<#=ClassName#>()
		{
			_ptr = <#=i.Invoke("ctor")#>;
		}

		public override float BinSize
		{
			<#=i.InvokeP("BinSize", "float")#>
		}

		public override float MinDistBetweenMaxima
		{
			<#=i.InvokeP("MinDistBetweenMaxima", "float")#>
		}

		public override int MaximaNumberAfterFiltering
			=> <#=i.InvokeI("getMaximaNumberAfterFiltering", "")#>;

		public override VectorOfInt MaximaCloudIndicesFiltered
			=> new VectorOfInt(<#=i.InvokeI("getMaximaCloudIndicesFiltered", "")#>);

		public override void SetInputCloud(PointCloud<<#=csin#>> cloud)
		{
			<#=i.InvokeI("setInputCloud", "cloud")#>;
		}

		public override void SetIndices(VectorOfInt indices)
		{
			<#=i.InvokeI("setIndices", "indices")#>;
		}

		public override void SetGroundCoeffs(Eigen.VectorXf coeffs)
			=> <#=i.InvokeI("setGroundCoeffs", "coeffs")#>;

		public override void filter(PointCloud<<#=csin#>> output)
		{
			<#=i.InvokeI("filter", "output")#>;
		}

		public override ref <#=csin#> this[int idx]
		{
			get { return ref this.Index(idx); }
		}

		protected override void DisposeObject()
		{
			<#=i.DeleteI()#>;
		}
	}
}
<#+ 
	manager.EndBlock(); 
	manager.StartNewFile("..\\..\\PclSharp.Extern\\filters\\Heightmap2DOf"+ClassName+".generated.cpp");
#>
// Code generated by a template
#pragma once
#include "..\export.h"

#include <pcl/pcl_base.h>
#include <pcl/point_types.h>
#include "Heightmap2D.hpp"

using namespace pcl;
using namespace std;
using namespace pcl::filters;

typedef boost::shared_ptr<PointCloud<<#=cppin#>>> boost_cloud;

#ifdef __cplusplus
extern "C" {
#endif 

<#=i.Export("cppPrefix*", "ctor", "")#>
{
	return new <#=cppWrapper#>();
}

<#=i.Export("void", "delete", "cppPrefix** ptr")#>
{
	delete *ptr;
	*ptr = NULL;
}

<#=i.ExportI("void", "filter", "")#>
{
	ptr->filter();
}

<#=i.ExportI("void", "setInputCloud", "PointCloud<cppin>* cloud")#>
{
	ptr->setInputCloud(boost_cloud(boost_cloud(), cloud));
}

<#=i.ExportI("void", "setIndices", "vector<int>* indices")#>
{
	ptr->setIndices(boost::shared_ptr<vector<int>>(boost::shared_ptr<vector<int>>(), indices));
}

<#=i.ExportI("vector<int>*", "getMaximaCloudIndicesFiltered", "")#>
{ return &ptr->getMaximaCloudIndicesFiltered(); }

<#=i.ExportI("int", "getMaximaNumberAfterFiltering", "")#>
{ return ptr->getMaximaNumberAfterFiltering(); }

<#=i.ExportI("void", "setGroundCoeffs", "Eigen::VectorXf* coeffs")#>
{ ptr->setGroundCoeffs(*coeffs); }

<#=i.ExportP("BinSize", "float")#>

<#=i.ExportP("MinDistBetweenMaxima", "float")#>

#ifdef __cplusplus  
}
#endif  
<#+	i.Dispose(); manager.EndBlock(false); }#>