// Code generated by a template
using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using System.Numerics;

namespace PclSharp.Eigen
{
	public static unsafe partial class Invoke
	{
		[DllImport(Native.DllName, CallingConvention=Native.CallingConvention)]
		public static extern IntPtr eigen_vectorx_f_ctor(int size);
		[DllImport(Native.DllName, CallingConvention=Native.CallingConvention)]
		public static extern void eigen_vectorx_f_delete(ref IntPtr ptr);

		[DllImport(Native.DllName, CallingConvention=Native.CallingConvention)]
		public static extern void eigen_vectorx_f_resize(IntPtr ptr, int size);
		[DllImport(Native.DllName, CallingConvention=Native.CallingConvention)]
		public static extern void eigen_vectorx_f_normalize(IntPtr ptr);

		[DllImport(Native.DllName, CallingConvention=Native.CallingConvention)]
		public static extern float eigen_vectorx_f_getIndex(IntPtr ptr, int idx);
		[DllImport(Native.DllName, CallingConvention=Native.CallingConvention)]
		public static extern void eigen_vectorx_f_setIndex(IntPtr ptr, int idx, float value);

		//properties
		[DllImport(Native.DllName, CallingConvention=Native.CallingConvention)]
		public static extern int eigen_vectorx_f_count(IntPtr ptr);
		[DllImport(Native.DllName, CallingConvention=Native.CallingConvention)]
		public static extern float* eigen_vectorx_f_data(IntPtr ptr);
	}

    public class VectorXf : UnmanagedObject
    {
		public int Count => Invoke.eigen_vectorx_f_count(_ptr);
		public unsafe float* Data => Invoke.eigen_vectorx_f_data(_ptr);

		public VectorXf()
		{
			_ptr = Invoke.eigen_vectorx_f_ctor(0);
		}

		public VectorXf(int count)
		{
			_ptr = Invoke.eigen_vectorx_f_ctor(count);
		}

		public VectorXf(Vector4 v)
			:this(4)
		{
			this[0] = v.X;
			this[1] = v.Y;
			this[2] = v.Z;
			this[3] = v.W;
		}

		public void Resize(int count)
			=> Invoke.eigen_vectorx_f_resize(_ptr, count);

		public void Normalize()
			=> Invoke.eigen_vectorx_f_normalize(_ptr);

		public float this[int i]
		{
			get { return Invoke.eigen_vectorx_f_getIndex(_ptr, i); }
			set { Invoke.eigen_vectorx_f_setIndex(_ptr, i, value); }
		}

        protected override void DisposeObject()
        {
            Invoke.eigen_vectorx_f_delete(ref _ptr);
        }
    }
}
