<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#@include file="..\Manager.ttinclude"#>
<#@include file="..\InvokeTemplate.ttinclude"#>
<# 

	var ClassName = "Matrix4f";
	var classname = ClassName.ToLower();
	var classFunc = "eigen_matrix4_f";
	var cppWrapper = "Matrix4f";

	var i = new InvokeT(classFunc, "Matrix4", cppWrapper);
	i.Var("cppWrapper", cppWrapper);
#>
// Code generated by a template
using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using System.Numerics;

namespace PclSharp.Eigen
{
	public static unsafe partial class Invoke
	{
		<#= i.Func("IntPtr", "ctor", "") #>
		<#= i.Delete() #>

		<#= i.FuncI("float", "getIndex", "int row, int col")#>
		<#= i.FuncI("void", "setIndex", "int row, int col, float value")#>

		//properties
		<#= i.FuncI("float*", "data", "")#>
	}

    public class Matrix4f : UnmanagedObject
    {
		public unsafe float* Data => <#=i.InvokeI("data")#>;

		public Matrix4f()
		{
			_ptr = <#=i.Invoke("ctor")#>;
		}

		/// <summary>
        /// Copy from an existing Matrix4x4
        /// </summary>
        /// <param name="m">matrix to copy</param>
		public unsafe Matrix4f(Matrix4x4 m)
			: this()
        {
            var start = &m.M11;
            for (int row = 0, i = 0; row < 4; row++)
                for (int col = 0; col < 4; col++, i++)
                    this[row, col] = start[i];
        }

		public float this[int row, int col]
		{
			get { return <#= i.InvokeI("getIndex", "row, col")#>; }
			set { <#=i.InvokeI("setIndex", "row, col, value")#>; }
		}

        protected override void DisposeObject()
        {
            <#=i.DeleteI()#>;
        }
    }
}
<#
	var manager = Manager.Create(Host, GenerationEnvironment);
	manager.StartNewFile("..\\..\\PclSharp.Extern\\eigen\\Matrix4f.generated.cpp");
#>
// Code generated by a template
#pragma once
#include "..\export.h"
#include <Eigen/Core>

using namespace Eigen;

typedef Eigen::Matrix<float, 4, 4> 	Matrix4f;

#ifdef __cplusplus
extern "C" {
#endif

<#=i.Export("cppWrapper*", "ctor", "")#>
{ return new <#=cppWrapper#>(); }

<#=i.Export("void", "delete", "cppWrapper** ptr")#>
{
	delete *ptr;
	*ptr = NULL;
}

<#=i.ExportI("void", "setIndex", "int row, int col, float value")#>
{ ptr->operator()(row, col) = value; }
<#=i.ExportI("float", "getIndex", "int row, int col")#>
{ return ptr->operator()(row, col); }

<#=i.ExportI("float*", "data", "")#>
{ return ptr->data(); }

#ifdef __cplusplus  
}
#endif
<# i.Dispose(); manager.EndBlock(false); manager.Process(true); #>