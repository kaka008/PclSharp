<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#@include file="..\Manager.ttinclude"#>
<#@include file="..\InvokeTemplate.ttinclude"#>
<# 

	var ClassName = "VectorXf";
	var classname = ClassName.ToLower();
	var classFunc = "eigen_vectorx_f";
	var cppWrapper = "VectorXf";

	var i = new InvokeT(classFunc, "VectorXf", cppWrapper);
#>
// Code generated by a template
using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using System.Numerics;

namespace PclSharp.Eigen
{
	public static unsafe partial class Invoke
	{
		<#= i.Func("IntPtr", "ctor", "int size") #>
		<#= i.Delete() #>

		<#= i.FuncI("void", "resize", "int size")#>
		<#=i.FuncI("void", "normalize", "")#>

		<#= i.FuncI("float", "getIndex", "int idx")#>
		<#= i.FuncI("void", "setIndex", "int idx, float value")#>

		//properties
		<#= i.FuncI("int", "count", "")#>
		<#= i.FuncI("float*", "data", "")#>
	}

    public class VectorXf : UnmanagedObject
    {
		public int Count => <#=i.InvokeI("count")#>;
		public unsafe float* Data => <#=i.InvokeI("data")#>;

		public VectorXf()
		{
			_ptr = <#=i.Invoke("ctor", "0")#>;
		}

		public VectorXf(int count)
		{
			_ptr = <#=i.Invoke("ctor", "count")#>;
		}

		public VectorXf(Vector4 v)
			:this(4)
		{
			this[0] = v.X;
			this[1] = v.Y;
			this[2] = v.Z;
			this[3] = v.W;
		}

		public void Resize(int count)
			=> <#=i.InvokeI("resize", "count")#>;

		public void Normalize()
			=> <#=i.InvokeI("normalize", "")#>;

		public float this[int i]
		{
			get { return <#= i.InvokeI("getIndex", "i")#>; }
			set { <#=i.InvokeI("setIndex", "i, value")#>; }
		}

        protected override void DisposeObject()
        {
            <#=i.DeleteI()#>;
        }
    }
}
<#
	var manager = Manager.Create(Host, GenerationEnvironment);
	manager.StartNewFile("..\\..\\PclSharp.Extern\\eigen\\VectorXf.generated.cpp");
#>
// Code generated by a template
#pragma once
#include "..\export.h"
#include<Eigen/Core>

using namespace Eigen;

#ifdef __cplusplus
extern "C" {
#endif

<#=i.Export("VectorXf*", "ctor", "int count")#>
{
	if (count == 0)
		return new VectorXf();
	else
		return new VectorXf(count);
}

<#=i.Export("void", "delete", "VectorXf** ptr")#>
{
	delete *ptr;
	*ptr = NULL;
}

<#=i.ExportI("void", "resize", "int count")#>
{ ptr->resize(count); }

<#=i.ExportI("void", "normalize", "")#>
{ ptr->normalize(); }

<#=i.ExportI("void", "setIndex", "int idx, float value")#>
{ ptr->operator[](idx) = value; }
<#=i.ExportI("float", "getIndex", "int idx")#>
{ return ptr->operator[](idx); }

<#=i.ExportI("int", "count", "")#>
{ return ptr->size(); }

<#=i.ExportI("float*", "data", "")#>
{ return ptr->data(); }

#ifdef __cplusplus  
}
#endif
<# i.Dispose(); manager.EndBlock(false); manager.Process(true); #>