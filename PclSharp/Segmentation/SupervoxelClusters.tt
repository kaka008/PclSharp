<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#@include file="..\Manager.ttinclude"#>
<#@include file="..\InvokeTemplate.ttinclude"#>
<# 
	var manager = Manager.Create(Host, GenerationEnvironment);
	outputClass(manager, "XYZRGBA", "PointXYZRGBA", "PointXYZRGBA");
	outputClass(manager, "XYZ", "PointXYZ", "PointXYZ");
	manager.Process(true);
#>
// Code generated by a template
using PclSharp.Common;
using PclSharp.Search;
using PclSharp.Std;

namespace PclSharp.Segmentation
{
	public abstract class SupervoxelClusters<PointT> : UnmanagedObject
	{
		public abstract int Count { get; }
	}
}
<#+ void outputClass(Manager manager, string ClassName, string csin, string cppin)
{ 
	var classname = ClassName.ToLower();
	var classFunc = "segmentation_supervoxelclusters_" + classname;
	
	var cppWrapper = "map<uint32_t, Supervoxel<"+cppin+">::Ptr>";

	manager.StartNewFile("SupervoxelClustersOf"+ClassName+".generated.cs");
	var i = new InvokeT(classFunc, csin, cppWrapper);
	i.Var("cppin", cppin);
	i.Var("cppWrapper", cppWrapper);
#>
using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using PclSharp.Struct;
namespace PclSharp.Segmentation
{
	public static partial class Invoke
	{
		<#= i.Ctor() #>
		<#= i.Delete() #>

		<#=i.FuncI("IntPtr", "at", "uint key")#>

		<#=i.FuncI("int", "count", "")#>
	}

	public class SupervoxelClustersOf<#=ClassName#> : SupervoxelClusters<<#=csin#>>
	{
		public override int Count => <#= i.InvokeI("count")#>;

		public SupervoxelClustersOf<#=ClassName#>()
		{
			_ptr = <#=i.Invoke("ctor")#>;
		}

		public SupervoxelOf<#=ClassName#> At(uint key)
			=> new SupervoxelOf<#=ClassName#>(<#=i.InvokeI("at", "key")#>);

		protected override void DisposeObject()
		{
			<#=i.DeleteI()#>;
		}
	}
}
<#+ 
	manager.EndBlock(); 
	manager.StartNewFile("..\\..\\PclSharp.Extern\\segmentation\\SupervoxelClustersOf"+ClassName+".generated.cpp");
#>
// Code generated by a template
#pragma once
#include "..\export.h"

#include "pcl\point_types.h"
#include <pcl/segmentation/supervoxel_clustering.h>

using namespace pcl;
using namespace std;

typedef boost::shared_ptr<PointCloud<<#=cppin#>>> boost_cloud;
typedef <#=cppWrapper#> SupervoxelClusters;

#ifdef __cplusplus
extern "C" {
#endif 

<#=i.Export("SupervoxelClusters*", "ctor", "")#>
{
	return new SupervoxelClusters();
}

<#=i.Export("void", "delete", "cppWrapper** ptr")#>
{
	delete *ptr;
	*ptr = NULL;
}

<#=i.ExportI("Supervoxel<cppin>*", "at", "uint32_t key")#>
{ return ptr->at(key).get(); }

<#=i.ExportI("int", "count", "")#>
{ return ptr->size(); }

#ifdef __cplusplus  
}
#endif  
<#+	i.Dispose(); manager.EndBlock(false); }#>