<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#@include file="..\Manager.ttinclude"#>
<#@include file="..\InvokeTemplate.ttinclude"#>
<# 
	var manager = Manager.Create(Host, GenerationEnvironment);
	outputClass(manager, "XYZ", "PointXYZ", "PointXYZ");
	manager.Process(true);
#>
// Code generated by a template
using PclSharp.SampleConsensus;
using PclSharp.Common;

namespace PclSharp.Segmentation
{
	public abstract class SACSegmentation<PointT> : PclBase<PointT>
	{
		public abstract SACModel ModelType { get; set; }
		public abstract int MaxIterations { get; set; }
		public abstract SACMethod MethodType { get; set; }
		public abstract double DistanceThreshold { get; set; }

		public abstract void Segment(PointIndices inliers, ModelCoefficients coefficients);
	}
}
<#+ void outputClass(Manager manager, string ClassName, string csin, string cppin)
{ 
	var classname = ClassName.ToLower();
	var classFunc = "segmentation_sacsegmentation_" + classname;
	
	var cppWrapper = "SACSegmentation<"+cppin+">";

	manager.StartNewFile("SACSegmentationOf"+ClassName+".generated.cs");
	var i = new InvokeT(classFunc, csin, cppWrapper);
	i.Var("cppin", cppin);
	i.Var("cppWrapper", cppWrapper);
#>
using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using PclSharp.Struct;
using PclSharp.Std;
using PclSharp.SampleConsensus;
using PclSharp.Common;

namespace PclSharp.Segmentation
{
	public static partial class Invoke
	{
		<#= i.Func("IntPtr", "ctor", "bool random") #>
		<#= i.Delete() #>

		//methods
		<#=i.FuncI("setInputCloud", "IntPtr cloud")#>
		<#= i.FuncI("setIndices", "IntPtr indices")#>
		<#=i.FuncI("segment", "IntPtr inliers, IntPtr coefficients")#>

		//properties
		<#=i.Prop("MethodType", "SACMethod")#>
		<#=i.Prop("ModelType", "SACModel")#>
		<#=i.Prop("OptimizeCoefficients", "bool")#>
		<#=i.Prop("MaxIterations", "int")#>
		<#=i.Prop("DistanceThreshold", "double")#>
	}

	public class SACSegmentationOf<#=ClassName#> : SACSegmentation<<#=csin#>>
	{
		public SACSegmentationOf<#=ClassName#>(bool random = false)
		{
			_ptr = <#=i.Invoke("ctor", "random")#>;
		}

		public bool OptimizeCoefficients
		{
			<#=i.InvokeP("OptimizeCoefficients", "bool")#>
		}

		public override SACModel ModelType
		{
			<#=i.InvokeP("ModelType", "SACModel")#>
		}

		public override int MaxIterations
		{
			<#=i.InvokeP("MaxIterations", "int")#>
		}

		public override SACMethod MethodType
		{
			<#=i.InvokeP("MethodType", "SACMethod")#>
		}

		public override double DistanceThreshold
		{
			<#=i.InvokeP("DistanceThreshold", "double")#>
		}

		public override void SetInputCloud(PointCloud<<#=csin#>> cloud)
		{
			<#=i.InvokeI("setInputCloud", "cloud")#>;
		}

		public override void SetIndices(VectorOfInt indices)
			=> <#=i.InvokeI("setIndices", "indices")#>;

		public override void Segment(PointIndices inliers, ModelCoefficients coefficients)
		{
			<#=i.InvokeI("segment", "inliers, coefficients")#>;
		}

		public override ref <#=csin#> this[int idx]
		{
			get { return ref this.Index(idx); }
		}

		protected override void DisposeObject()
		{
			<#=i.DeleteI()#>;
		}
	}
}
<#+ 
	manager.EndBlock(); 
	manager.StartNewFile("..\\..\\PclSharp.Extern\\segmentation\\SACSegmentationOf"+ClassName+".generated.cpp");
#>
// Code generated by a template
#pragma once
#include "..\export.h"

#include "pcl\point_types.h"
#include <pcl/segmentation/sac_segmentation.h>

using namespace pcl;
using namespace std;

typedef boost::shared_ptr<PointCloud<<#=cppin#>>> boost_cloud;
typedef boost::shared_ptr<vector<int>> boost_indices;

#ifdef __cplusplus
extern "C" {
#endif 

<#=i.Export("cppWrapper*", "ctor", "bool random")#>
{
	return new <#=cppWrapper#>(random);
}

<#=i.Export("void", "delete", "cppWrapper** ptr")#>
{
	delete *ptr;
	*ptr = NULL;
}

<#=i.ExportI("void", "setInputCloud", "PointCloud<cppin>* cloud")#>
{
	ptr->setInputCloud(boost_cloud(boost_cloud(), cloud));
}

<#= i.ExportI("void", "setIndices", "std::vector<int>* indices")#>
{ ptr->setIndices(boost_indices(boost_indices(), indices)); }

<#=i.ExportI("void", "segment", "PointIndices* inliers, ModelCoefficients* coefficients")#>
{
	ptr->segment(*inliers, *coefficients);
}

<#=i.ExportP("OptimizeCoefficients", "int")#>

<#=i.ExportP("ModelType", "int")#>

<#=i.ExportP("MaxIterations", "int")#>

<#=i.ExportP("MethodType", "int")#>

<#=i.ExportP("DistanceThreshold", "double")#>

#ifdef __cplusplus  
}
#endif  
<#+	i.Dispose(); manager.EndBlock(false); }#>