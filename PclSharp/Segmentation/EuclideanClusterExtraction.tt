<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#@include file="..\Manager.ttinclude"#>
<#@include file="..\InvokeTemplate.ttinclude"#>
<# 
	var manager = Manager.Create(Host, GenerationEnvironment);
	outputClass(manager, "XYZ", "PointXYZ", "PointXYZ");
	manager.Process(true);
#>
// Code generated by a template
using PclSharp.Common;
using PclSharp.Search;
using PclSharp.Std;

namespace PclSharp.Segmentation
{
	public abstract class EuclideanClusterExtraction<PointT> : PclBase<PointT>
	{
		public abstract void SetSearchMethod(Search<PointT> search);
		public abstract void Extract(Vector<PointIndices> clusters);
	}
}
<#+ void outputClass(Manager manager, string ClassName, string csin, string cppin)
{ 
	var classname = ClassName.ToLower();
	var classFunc = "segmentation_euclideanclusterextraction_" + classname;
	
	var cppWrapper = "EuclideanClusterExtraction<"+cppin+">";

	manager.StartNewFile("EuclideanClusterExtractionOf"+ClassName+".generated.cs");
	var i = new InvokeT(classFunc, csin, cppWrapper);
	i.Var("cppin", cppin);
	i.Var("cppWrapper", cppWrapper);
#>
using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using PclSharp.Struct;
using PclSharp.Std;
using PclSharp.SampleConsensus;
using PclSharp.Common;
using PclSharp.Search;

namespace PclSharp.Segmentation
{
	public static partial class Invoke
	{
		<#= i.Ctor() #>
		<#= i.Delete() #>

		//methods
		<#=i.FuncI("setInputCloud", "IntPtr cloud")#>
		<#= i.FuncI("setIndices", "IntPtr indices")#>
		<#=i.FuncI("setSearchMethod", "IntPtr search")#>
		<#=i.FuncI("extract", "IntPtr clusters")#>

		//properties
		<#=i.Prop("ClusterTolerance", "double")#>
		<#=i.Prop("MinClusterSize", "int")#>
		<#=i.Prop("MaxClusterSize", "int")#>
	}

	public class EuclideanClusterExtractionOf<#=ClassName#> : EuclideanClusterExtraction<<#=csin#>>
	{
		public double ClusterTolerance
		{
			<#=i.InvokeP("ClusterTolerance", "double")#>
		}

		public int MinClusterSize
		{
			<#=i.InvokeP("MinClusterSize", "int")#>
		}

		public int MaxClusterSize
		{
			<#=i.InvokeP("MaxClusterSize", "int")#>
		}

		public EuclideanClusterExtractionOf<#=ClassName#>()
		{
			_ptr = <#=i.Invoke("ctor")#>;
		}

		public override void SetInputCloud(PointCloud<<#=csin#>> cloud)
		{
			<#=i.InvokeI("setInputCloud", "cloud")#>;
		}

		public override void SetIndices(VectorOfInt indices)
			=> <#=i.InvokeI("setIndices", "indices")#>;

		public override void SetSearchMethod(Search<<#=csin#>> search)
		{
			<#=i.InvokeI("setSearchMethod", "search")#>;
		}

		public override void Extract(Vector<PointIndices> clusters)
		{
			<#=i.InvokeI("extract", "clusters")#>;
		}

		public override ref <#=csin#> this[int idx]
		{
			get { return ref this.Index(idx); }
		}

		protected override void DisposeObject()
		{
			<#=i.DeleteI()#>;
		}
	}
}
<#+ 
	manager.EndBlock(); 
	manager.StartNewFile("..\\..\\PclSharp.Extern\\segmentation\\EuclideanClusterExtractionOf"+ClassName+".generated.cpp");
#>
// Code generated by a template
#pragma once
#include "..\export.h"

#include "pcl\point_types.h"
#include <pcl/segmentation/extract_clusters.h>

using namespace pcl;
using namespace std;

typedef boost::shared_ptr<PointCloud<<#=cppin#>>> boost_cloud;
typedef boost::shared_ptr<pcl::search::Search<<#=cppin#>>> search_ptr;
typedef boost::shared_ptr<vector<int>> boost_indices;

#ifdef __cplusplus
extern "C" {
#endif 

<#=i.Export("cppWrapper*", "ctor", "")#>
{
	return new <#=cppWrapper#>();
}

<#=i.Export("void", "delete", "cppWrapper** ptr")#>
{
	delete *ptr;
	*ptr = NULL;
}

<#=i.ExportI("void", "setInputCloud", "PointCloud<cppin>* cloud")#>
{
	ptr->setInputCloud(boost_cloud(boost_cloud(), cloud));
}

<#= i.ExportI("void", "setIndices", "std::vector<int>* indices")#>
{ ptr->setIndices(boost_indices(boost_indices(), indices)); }

<#=i.ExportI("void", "setSearchMethod", "pcl::search::Search<cppin>* search")#>
{
	ptr->setSearchMethod(search_ptr(search_ptr(), search));
}

<#=i.ExportI("void", "extract", "vector<PointIndices>* clusters")#>
{
	ptr->extract(*clusters);
}

<#=i.ExportP("ClusterTolerance", "double")#>

<#=i.ExportP("MinClusterSize", "int")#>

<#=i.ExportP("MaxClusterSize", "int")#>

#ifdef __cplusplus  
}
#endif  
<#+	i.Dispose(); manager.EndBlock(false); }#>