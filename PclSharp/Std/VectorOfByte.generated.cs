// Code generated by a template
using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;


namespace PclSharp.Std
{
	public static partial class Invoke
	{
		[DllImport(Native.DllName, CallingConvention=Native.CallingConvention)]
		public static extern IntPtr std_vector_byte_ctor();
		[DllImport(Native.DllName, CallingConvention=Native.CallingConvention)]
		public static extern IntPtr std_vector_byte_ctor_count(int count);
		[DllImport(Native.DllName, CallingConvention=Native.CallingConvention)]
		public static extern void std_vector_byte_delete(ref IntPtr ptr);
		[DllImport(Native.DllName, CallingConvention=Native.CallingConvention)]
		public static extern void std_vector_byte_at(IntPtr ptr,  UIntPtr idx, ref byte value);
		[DllImport(Native.DllName, CallingConvention=Native.CallingConvention)]
		public static extern UIntPtr std_vector_byte_size(IntPtr ptr);
		[DllImport(Native.DllName, CallingConvention=Native.CallingConvention)]
		public static extern void std_vector_byte_clear(IntPtr ptr);
		[DllImport(Native.DllName, CallingConvention=Native.CallingConvention)]
		public static extern void std_vector_byte_resize(IntPtr ptr, int size);
		[DllImport(Native.DllName, CallingConvention=Native.CallingConvention)]
		public static extern void std_vector_byte_add(IntPtr ptr, byte value);
		[DllImport(Native.DllName, CallingConvention=Native.CallingConvention)]
		public static extern IntPtr std_vector_byte_data(IntPtr ptr);
		[DllImport(Native.DllName, CallingConvention=Native.CallingConvention)]
		public static extern void std_vector_byte_insert(IntPtr ptr, IntPtr idx, byte value);
	}

	public unsafe class VectorOfByte : Vector<byte>
	{	
		private bool _suppressDispose;

		public override int Count => (int)Invoke.std_vector_byte_size(_ptr);
		public IntPtr Data => Invoke.std_vector_byte_data(_ptr);
		public byte* DataU => (byte*)Data;

		public VectorOfByte()
		{
			_ptr = Invoke.std_vector_byte_ctor();
		}

		public VectorOfByte(int count)
		{
			_ptr = Invoke.std_vector_byte_ctor_count(count);
		}

		/// <summary>
        /// construct as a copy of the list
        /// </summary>
        /// <param name="list"></param>
		public VectorOfByte(List<byte> list)
        {
            var arr = list.ToArray();
            _ptr = Invoke.std_vector_byte_ctor_count(arr.Length);
            
            var dptr = (byte*)Data;
            for(var i = 0; i < arr.Length; i++)
                dptr[i] = arr[i];
        }

		internal VectorOfByte(IntPtr ptr)
		{
			_suppressDispose = true;
			_ptr = ptr;
		}

		public override void At(int idx, ref byte value)
		{
			Invoke.std_vector_byte_at(_ptr, (UIntPtr)idx, ref value);
		}

		public override byte this[int idx]
        {
            get { return DataU[idx]; }
			set { DataU[idx] = value; }
		}

		public override void Resize(int size)
			=> Invoke.std_vector_byte_resize(_ptr, size);

		public override void Add(byte value)
			=> Invoke.std_vector_byte_add(_ptr, value);

		public override void CopyTo(byte[] arr, int idx)
		{
            fixed (byte* aptr = arr)
            {
                Unsafe.CopyBlockUnaligned(aptr, DataU, (uint)(sizeof(byte) * Count));
            }
		}

		public override byte[] ToArray()
		{
			var arr = new byte[Count];
            fixed (byte* aptr = arr)
            {
                Unsafe.CopyBlockUnaligned(aptr, DataU, (uint)(sizeof(byte) * arr.Length));
            }

			return arr;
		}

		public override void Clear() => Invoke.std_vector_byte_clear(_ptr);

		public override void Insert(int index, byte item)
			=> Invoke.std_vector_byte_insert(_ptr, (IntPtr)index, item);

		public override IEnumerator<byte> GetEnumerator()
		{
			var count = Count;
			for(var i = 0; i < count; i++)
				yield return this[i];
		}

		protected override void DisposeObject()
		{
			if (_suppressDispose)
				return;
			Invoke.std_vector_byte_delete(ref _ptr);
		}
	}
}
