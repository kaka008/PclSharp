// Code generated by a template
using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;


namespace PclSharp.Std
{
	public static partial class Invoke
	{
		[DllImport(Native.DllName, CallingConvention=Native.CallingConvention)]
		public static extern IntPtr std_vector_pointindices_ctor();
		[DllImport(Native.DllName, CallingConvention=Native.CallingConvention)]
		public static extern IntPtr std_vector_pointindices_ctor_count(int count);
		[DllImport(Native.DllName, CallingConvention=Native.CallingConvention)]
		public static extern void std_vector_pointindices_delete(ref IntPtr ptr);
		[DllImport(Native.DllName, CallingConvention=Native.CallingConvention)]
		public static extern IntPtr std_vector_pointindices_at(IntPtr ptr,  UIntPtr idx);
		[DllImport(Native.DllName, CallingConvention=Native.CallingConvention)]
		public static extern UIntPtr std_vector_pointindices_size(IntPtr ptr);
		[DllImport(Native.DllName, CallingConvention=Native.CallingConvention)]
		public static extern void std_vector_pointindices_clear(IntPtr ptr);
		[DllImport(Native.DllName, CallingConvention=Native.CallingConvention)]
		public static extern void std_vector_pointindices_resize(IntPtr ptr, int size);
		[DllImport(Native.DllName, CallingConvention=Native.CallingConvention)]
		public static extern void std_vector_pointindices_add(IntPtr ptr, PointIndices value);
		[DllImport(Native.DllName, CallingConvention=Native.CallingConvention)]
		public static extern void std_vector_pointindices_insert(IntPtr ptr, IntPtr idx, PointIndices value);
	}

	public unsafe class VectorOfPointIndices : Vector<PointIndices>
	{	
		private bool _suppressDispose;

		public override int Count => (int)Invoke.std_vector_pointindices_size(_ptr);

		public VectorOfPointIndices()
		{
			_ptr = Invoke.std_vector_pointindices_ctor();
		}

		public VectorOfPointIndices(int count)
		{
			_ptr = Invoke.std_vector_pointindices_ctor_count(count);
		}

		internal VectorOfPointIndices(IntPtr ptr)
		{
			_suppressDispose = true;
			_ptr = ptr;
		}

		public override void At(int idx, ref PointIndices value)
		{
			throw new NotImplementedException();
		}

		private IntPtr At(int idx)
			=> Invoke.std_vector_pointindices_at(_ptr, (UIntPtr)idx);

		public override PointIndices this[int idx]
        {
            get { return new PointIndices(At(idx)); }
			set { throw new NotImplementedException(); }
		}

		public override void Resize(int size)
			=> Invoke.std_vector_pointindices_resize(_ptr, size);

		public override void Add(PointIndices value)
			=> Invoke.std_vector_pointindices_add(_ptr, value);

		public override void CopyTo(PointIndices[] arr, int idx)
		{
            throw new NotImplementedException();
		}

		public override PointIndices[] ToArray()
		{
			var arr = new PointIndices[Count];
			for(var i = 0; i < arr.Length; i++)
				arr[i] = new PointIndices(At(i));

			return arr;
		}

		public override void Clear() => Invoke.std_vector_pointindices_clear(_ptr);

		public override void Insert(int index, PointIndices item)
			=> Invoke.std_vector_pointindices_insert(_ptr, (IntPtr)index, item);

		public override IEnumerator<PointIndices> GetEnumerator()
		{
			var count = Count;
			for(var i = 0; i < count; i++)
				yield return new PointIndices(At(i));
		}

		protected override void DisposeObject()
		{
			if (_suppressDispose)
				return;
			Invoke.std_vector_pointindices_delete(ref _ptr);
		}
	}
}
