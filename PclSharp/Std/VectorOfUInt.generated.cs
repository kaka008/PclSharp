// Code generated by a template
using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;


namespace PclSharp.Std
{
	public static partial class Invoke
	{
		[DllImport(Native.DllName, CallingConvention=Native.CallingConvention)]
		public static extern IntPtr std_vector_uint_ctor();
		[DllImport(Native.DllName, CallingConvention=Native.CallingConvention)]
		public static extern IntPtr std_vector_uint_ctor_count(int count);
		[DllImport(Native.DllName, CallingConvention=Native.CallingConvention)]
		public static extern void std_vector_uint_delete(ref IntPtr ptr);
		[DllImport(Native.DllName, CallingConvention=Native.CallingConvention)]
		public static extern void std_vector_uint_at(IntPtr ptr,  UIntPtr idx, ref uint value);
		[DllImport(Native.DllName, CallingConvention=Native.CallingConvention)]
		public static extern UIntPtr std_vector_uint_size(IntPtr ptr);
		[DllImport(Native.DllName, CallingConvention=Native.CallingConvention)]
		public static extern void std_vector_uint_clear(IntPtr ptr);
		[DllImport(Native.DllName, CallingConvention=Native.CallingConvention)]
		public static extern void std_vector_uint_resize(IntPtr ptr, int size);
		[DllImport(Native.DllName, CallingConvention=Native.CallingConvention)]
		public static extern void std_vector_uint_add(IntPtr ptr, uint value);
		[DllImport(Native.DllName, CallingConvention=Native.CallingConvention)]
		public static extern IntPtr std_vector_uint_data(IntPtr ptr);
		[DllImport(Native.DllName, CallingConvention=Native.CallingConvention)]
		public static extern void std_vector_uint_insert(IntPtr ptr, IntPtr idx, uint value);
	}

	public unsafe class VectorOfUInt : Vector<uint>
	{	
		private bool _suppressDispose;

		public override int Count => (int)Invoke.std_vector_uint_size(_ptr);
		public IntPtr Data => Invoke.std_vector_uint_data(_ptr);
		public uint* DataU => (uint*)Data;

		public VectorOfUInt()
		{
			_ptr = Invoke.std_vector_uint_ctor();
		}

		public VectorOfUInt(int count)
		{
			_ptr = Invoke.std_vector_uint_ctor_count(count);
		}

		/// <summary>
        /// construct as a copy of the list
        /// </summary>
        /// <param name="list"></param>
		public VectorOfUInt(List<uint> list)
        {
            var arr = list.ToArray();
            _ptr = Invoke.std_vector_uint_ctor_count(arr.Length);
            
            var dptr = (uint*)Data;
            for(var i = 0; i < arr.Length; i++)
                dptr[i] = arr[i];
        }

		internal VectorOfUInt(IntPtr ptr)
		{
			_suppressDispose = true;
			_ptr = ptr;
		}

		public override void At(int idx, ref uint value)
		{
			Invoke.std_vector_uint_at(_ptr, (UIntPtr)idx, ref value);
		}

		public override uint this[int idx]
        {
            get { return DataU[idx]; }
			set { DataU[idx] = value; }
		}

		public override void Resize(int size)
			=> Invoke.std_vector_uint_resize(_ptr, size);

		public override void Add(uint value)
			=> Invoke.std_vector_uint_add(_ptr, value);

		public override void CopyTo(uint[] arr, int idx)
		{
            fixed (uint* aptr = arr)
            {
                Unsafe.CopyBlockUnaligned(aptr, DataU, (uint)(sizeof(uint) * Count));
            }
		}

		public override uint[] ToArray()
		{
			var arr = new uint[Count];
            fixed (uint* aptr = arr)
            {
                Unsafe.CopyBlockUnaligned(aptr, DataU, (uint)(sizeof(uint) * arr.Length));
            }

			return arr;
		}

		public override void Clear() => Invoke.std_vector_uint_clear(_ptr);

		public override void Insert(int index, uint item)
			=> Invoke.std_vector_uint_insert(_ptr, (IntPtr)index, item);

		public override IEnumerator<uint> GetEnumerator()
		{
			var count = Count;
			for(var i = 0; i < count; i++)
				yield return this[i];
		}

		protected override void DisposeObject()
		{
			if (_suppressDispose)
				return;
			Invoke.std_vector_uint_delete(ref _ptr);
		}
	}
}
