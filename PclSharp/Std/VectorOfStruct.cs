// Code generated by a template
using System;
using System.Collections;
using System.Collections.Generic;

namespace PclSharp.Std
{
	public abstract class Vector<T> : UnmanagedObject, IList<T>
	{
		public abstract T this[int index]{ get; set; }

        public abstract int Count { get; }

        public bool IsReadOnly => false;

        public abstract void Add(T item);

        public abstract void Clear();

        public abstract void CopyTo(T[] array, int arrayIndex);
        
        public abstract void Insert(int index, T item);

		public abstract T[] ToArray();

		public abstract void Resize(int size);

		public abstract void At(int idx, ref T value);

		public bool Contains(T item)
		{ throw new NotImplementedException(); }

		public int IndexOf(T item)
		{ throw new NotImplementedException(); }

        public bool Remove(T item)
		{ throw new NotImplementedException(); }

        public void RemoveAt(int index)
		{ throw new NotImplementedException(); }

		public virtual IEnumerator<T> GetEnumerator()
			=> ((IEnumerable<T>)ToArray()).GetEnumerator();

        IEnumerator IEnumerable.GetEnumerator()
            => GetEnumerator();
	}
}
