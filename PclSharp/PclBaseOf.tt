<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".txt" #>
<#@include file="Manager.ttinclude"#>
<#@include file="InvokeTemplate.ttinclude"#>
<# 
	var manager = Manager.Create(Host, GenerationEnvironment);
	outputClass(manager, "XYZ", "PointXYZ", "PointXYZ");
	outputClass(manager, "XYZRGBA", "PointXYZRGBA", "PointXYZRGBA");
	manager.Process(true);
#>
<#+ void outputClass(Manager manager, string ClassName, string csin, string cppin)
{ 
	var classname = ClassName.ToLower();
	var classFunc = "pclbase_" + classname;
	
	var cppWrapper = "PCLBase<"+cppin+">";

	manager.StartNewFile("PclBaseOf"+ClassName+".generated.cs");
	var i = new InvokeT(classFunc, csin, cppWrapper);
	i.Var("cppin", cppin);
#>
// Code generated by a template
using System;
using System.Numerics;
using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;
using PclSharp.Struct;
using PclSharp.Std;

namespace PclSharp
{
	public static unsafe partial class Invoke
	{
		<#=i.FuncI("setInputCloud", "IntPtr cloud")#>
		<#=i.FuncI("setIndices", "IntPtr indices")#>
		
		<#=i.FuncI("csClass*", "indexGet", "int idx")#>
	}

	public static unsafe class PclBaseOf<#=ClassName#>
	{
		public static void SetInputCloud(this PclBase<<#=csin#>> _ptr, PointCloud<<#=csin#>> cloud)
			=> <#=i.InvokeI("setInputCloud", "cloud")#>;

		public static void SetIndices(this PclBase<<#=csin#>> _ptr, VectorOfInt indices)
			=> <#=i.InvokeI("setIndices", "indices")#>;

		public static ref <#=csin#> Index(this PclBase<<#=csin#>> _ptr, int idx)
			=> ref Unsafe.AsRef<<#=csin#>>(<#=i.InvokeI("indexGet", "idx")#>);
	}
}
<#+ 
	manager.EndBlock(); 
	manager.StartNewFile("..\\PclSharp.Extern\\common\\PclBaseOf"+ClassName+".generated.cpp");
#>
// Code generated by a template
#pragma once
#include "..\export.h"

#include <pcl/pcl_base.h>
#include <pcl/point_types.h>

using namespace pcl;
using namespace std;

typedef boost::shared_ptr<PointCloud<<#=cppin#>>> boost_cloud;

#ifdef __cplusplus
extern "C" {
#endif 

<#=i.ExportI("void", "setInputCloud", "PointCloud<cppin>* cloud")#>
{
	ptr->setInputCloud(boost_cloud(boost_cloud(), cloud));
}

<#=i.ExportI("void", "setIndices", "vector<int>* indices")#>
{
	ptr->setIndices(boost::shared_ptr<vector<int>>(boost::shared_ptr<vector<int>>(), indices));
}

<#=i.ExportI("const cppin*", "indexGet", "int idx")#>
{ return &ptr->operator[](idx); }

#ifdef __cplusplus  
}
#endif  
<#+	i.Dispose(); manager.EndBlock(false); }#>