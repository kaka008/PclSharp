// Code generated by a template
#pragma once
#include "..\export.h"
#include <vector>


using namespace std;


typedef vector<float> vectorType;

#ifdef __cplusplus  
extern "C" {  
#endif

EXPORT(vectorType*) std_vector_float_ctor()
{
	return new vector<float>();
}

EXPORT(vectorType*) std_vector_float_ctor_count(int count)
{
	return new vector<float>(count);
}

EXPORT(void) std_vector_float_delete(vector<float>** ptr)
{
	delete *ptr;
	*ptr = NULL;
}

EXPORT(void) std_vector_float_at(vector<float>* ptr, size_t idx, float* value)
{
	*value = ptr->at(idx);
}

EXPORT(size_t) std_vector_float_size(vector<float>* ptr)
{
	return ptr->size();
}

EXPORT(void) std_vector_float_clear(vector<float>* ptr)
{
	ptr->clear();
}

EXPORT(void) std_vector_float_resize(vector<float>* ptr, int32_t size)
{
	ptr->resize(size);
}

EXPORT(void) std_vector_float_add(vector<float>* ptr, float value)
{
		ptr->push_back(value);
}

EXPORT(void) std_vector_float_insert(vector<float>* ptr, ptrdiff_t index, float value)
{
		ptr->insert(ptr->begin()+index, value);
}

EXPORT(float*) std_vector_float_data(vector<float>* ptr)
{
	return ptr->data();
}

#ifdef __cplusplus  
}
#endif
