// Code generated by a template
#pragma once
#include "..\export.h"
#include <vector>
#include "pcl\point_types.h"


using namespace std;
using namespace pcl;


typedef vector<PointXYZL> vectorType;

#ifdef __cplusplus  
extern "C" {  
#endif

EXPORT(vectorType*) std_vector_xyzl_ctor()
{
	return new vector<PointXYZL>();
}

EXPORT(vectorType*) std_vector_xyzl_ctor_count(int count)
{
	return new vector<PointXYZL>(count);
}

EXPORT(void) std_vector_xyzl_delete(vector<PointXYZL>** ptr)
{
	delete *ptr;
	*ptr = NULL;
}

EXPORT(void) std_vector_xyzl_at(vector<PointXYZL>* ptr, size_t idx, PointXYZL* value)
{
	*value = ptr->at(idx);
}

EXPORT(size_t) std_vector_xyzl_size(vector<PointXYZL>* ptr)
{
	return ptr->size();
}

EXPORT(void) std_vector_xyzl_clear(vector<PointXYZL>* ptr)
{
	ptr->clear();
}

EXPORT(void) std_vector_xyzl_resize(vector<PointXYZL>* ptr, int32_t size)
{
	ptr->resize(size);
}

EXPORT(void) std_vector_xyzl_add(vector<PointXYZL>* ptr, PointXYZL value)
{
	//the value needs to be aligned to be pushed into the cloud, so do that.
	PointXYZL deref;
	memcpy(&deref, &value, sizeof(PointXYZL));
	ptr->push_back(deref);
}

EXPORT(void) std_vector_xyzl_insert(vector<PointXYZL>* ptr, ptrdiff_t index, PointXYZL value)
{
	//the value needs to be aligned to be pushed into the cloud, so do that.
	PointXYZL deref;
	memcpy(&deref, &value, sizeof(PointXYZL));
	ptr->insert(ptr->begin()+index, deref);
}

EXPORT(PointXYZL*) std_vector_xyzl_data(vector<PointXYZL>* ptr)
{
	return ptr->data();
}

#ifdef __cplusplus  
}
#endif
