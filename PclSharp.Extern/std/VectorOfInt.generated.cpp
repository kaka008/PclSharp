// Code generated by a template
#pragma once
#include "..\export.h"
#include <vector>


using namespace std;


typedef vector<int> vectorType;

#ifdef __cplusplus  
extern "C" {  
#endif

EXPORT(vectorType*) std_vector_int_ctor()
{
	return new vector<int>();
}

EXPORT(vectorType*) std_vector_int_ctor_count(int count)
{
	return new vector<int>(count);
}

EXPORT(void) std_vector_int_delete(vector<int>** ptr)
{
	delete *ptr;
	*ptr = NULL;
}

EXPORT(void) std_vector_int_at(vector<int>* ptr, size_t idx, int* value)
{
	*value = ptr->at(idx);
}

EXPORT(size_t) std_vector_int_size(vector<int>* ptr)
{
	return ptr->size();
}

EXPORT(void) std_vector_int_clear(vector<int>* ptr)
{
	ptr->clear();
}

EXPORT(void) std_vector_int_resize(vector<int>* ptr, int32_t size)
{
	ptr->resize(size);
}

EXPORT(void) std_vector_int_add(vector<int>* ptr, int value)
{
		ptr->push_back(value);
}

EXPORT(void) std_vector_int_insert(vector<int>* ptr, ptrdiff_t index, int value)
{
		ptr->insert(ptr->begin()+index, value);
}

EXPORT(int*) std_vector_int_data(vector<int>* ptr)
{
	return ptr->data();
}

#ifdef __cplusplus  
}
#endif
