// Code generated by a template
#pragma once
#include "..\export.h"
#include <vector>
#include "pcl/PointIndices.h"


using namespace std;
using namespace pcl;


typedef vector<PointIndices> vectorType;

#ifdef __cplusplus  
extern "C" {  
#endif

EXPORT(vectorType*) std_vector_pointindices_ctor()
{
	return new vector<PointIndices>();
}

EXPORT(vectorType*) std_vector_pointindices_ctor_count(int count)
{
	return new vector<PointIndices>(count);
}

EXPORT(void) std_vector_pointindices_delete(vector<PointIndices>** ptr)
{
	delete *ptr;
	*ptr = NULL;
}

EXPORT(PointIndices*) std_vector_pointindices_at(vector<PointIndices>* ptr, size_t idx)
{
	return &ptr->at(idx);
}

EXPORT(size_t) std_vector_pointindices_size(vector<PointIndices>* ptr)
{
	return ptr->size();
}

EXPORT(void) std_vector_pointindices_clear(vector<PointIndices>* ptr)
{
	ptr->clear();
}

EXPORT(void) std_vector_pointindices_resize(vector<PointIndices>* ptr, int32_t size)
{
	ptr->resize(size);
}

EXPORT(void) std_vector_pointindices_add(vector<PointIndices>* ptr, PointIndices* value)
{
	ptr->push_back(*value);
}

EXPORT(void) std_vector_pointindices_insert(vector<PointIndices>* ptr, ptrdiff_t index, PointIndices* value)
{
	ptr->insert(ptr->begin()+index, *value);
}

#ifdef __cplusplus  
}
#endif
