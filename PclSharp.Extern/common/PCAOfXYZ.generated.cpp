// Code generated by a template
#pragma once
#include "..\export.h"

#include <pcl/point_types.h>
#include <pcl/common/pca.h>

using namespace pcl;
using namespace std;

typedef std::shared_ptr<PointCloud<PointXYZ>> std_cloud;
typedef std::shared_ptr<vector<int>> std_indices;

#ifdef __cplusplus
extern "C" {
#endif 

EXPORT(PCA<PointXYZ>*) pca_xyz_ctor(int basisOnly)
{ return new PCA<PointXYZ>(basisOnly); }

EXPORT(void) pca_xyz_delete(PCA<PointXYZ>** ptr)
{
	delete *ptr;
	*ptr = NULL;
}

EXPORT(void) pca_xyz_setInputCloud(PCA<PointXYZ>* ptr, PointCloud<PointXYZ>* cloud)
{ ptr->setInputCloud(std_cloud(std_cloud(), cloud)); }

EXPORT(void) pca_xyz_setIndices(PCA<PointXYZ>* ptr, std::vector<int>* indices)
{ ptr->setIndices(std_indices(std_indices(), indices)); }

EXPORT(void) pca_xyz_update(PCA<PointXYZ>* ptr, PointXYZ* input, PCA<PointXYZ>::FLAG flag)
{ ptr->update(*input, flag); }

EXPORT(Eigen::Vector4f) pca_xyz_getMean(PCA<PointXYZ>* ptr)
{ return ptr->getMean(); }

EXPORT(Eigen::Vector3f) pca_xyz_getEigenValues(PCA<PointXYZ>* ptr)
{ return ptr->getEigenValues(); }

#ifdef __cplusplus  
}
#endif  
