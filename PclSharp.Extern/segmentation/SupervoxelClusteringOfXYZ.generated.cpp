// Code generated by a template
#pragma once
#include "..\export.h"

#include "pcl\point_types.h"
#include <pcl/segmentation/supervoxel_clustering.h>

using namespace pcl;
using namespace std;

typedef boost::shared_ptr<PointCloud<PointXYZ>> boost_cloud;
typedef boost::shared_ptr<PointCloud<Normal>> normal_cloud;
typedef boost::shared_ptr<vector<int>> boost_indices;

#ifdef __cplusplus
extern "C" {
#endif 

EXPORT(SupervoxelClustering<PointXYZ>*) segmentation_supervoxelclustering_xyz_ctor(float voxelResolution, float seedResolution)
{
	return new SupervoxelClustering<PointXYZ>(voxelResolution, seedResolution);
}

EXPORT(void) segmentation_supervoxelclustering_xyz_delete(SupervoxelClustering<PointXYZ>** ptr)
{
	delete *ptr;
	*ptr = NULL;
}

EXPORT(void) segmentation_supervoxelclustering_xyz_setInputCloud(SupervoxelClustering<PointXYZ>* ptr, PointCloud<PointXYZ>* cloud)
{
	ptr->setInputCloud(boost_cloud(boost_cloud(), cloud));
}

EXPORT(void) segmentation_supervoxelclustering_xyz_setIndices(SupervoxelClustering<PointXYZ>* ptr, std::vector<int>* indices)
{ ptr->setIndices(boost_indices(boost_indices(), indices)); }

EXPORT(void) segmentation_supervoxelclustering_xyz_setNormalCloud(SupervoxelClustering<PointXYZ>* ptr, PointCloud<Normal>* cloud)
{
	ptr->setNormalCloud(normal_cloud(normal_cloud(), cloud));
}

EXPORT(void) segmentation_supervoxelclustering_xyz_extract(SupervoxelClustering<PointXYZ>* ptr, map<uint32_t, Supervoxel<PointXYZ>::Ptr>* clusters)
{
	ptr->extract(*clusters);
}

EXPORT(void) segmentation_supervoxelclustering_xyz_refineSupervoxels(SupervoxelClustering<PointXYZ>* ptr, int iterations, map<uint32_t, Supervoxel<PointXYZ>::Ptr>* clusters)
{ ptr->refineSupervoxels(iterations, *clusters); }

EXPORT(PointCloud<PointXYZL>*) segmentation_supervoxelclustering_xyz_getLabeledCloud(SupervoxelClustering<PointXYZ>* ptr)
{ return ptr->getLabeledCloud().get(); }

EXPORT(void) segmentation_supervoxelclustering_xyz_getSupervoxelAdjacency(SupervoxelClustering<PointXYZ>* ptr, std::multimap< uint32_t, uint32_t >* multimap)
{ ptr->getSupervoxelAdjacency(*multimap); }

EXPORT(void) segmentation_supervoxelclustering_xyz_setColorImportance(SupervoxelClustering<PointXYZ>* ptr, float value)
{ ptr->setColorImportance(value); }

EXPORT(void) segmentation_supervoxelclustering_xyz_setNormalImportance(SupervoxelClustering<PointXYZ>* ptr, float value)
{ ptr->setNormalImportance(value); }

EXPORT(void) segmentation_supervoxelclustering_xyz_setSpatialImportance(SupervoxelClustering<PointXYZ>* ptr, float value)
{ ptr->setSpatialImportance(value); }

EXPORT(void) segmentation_supervoxelclustering_xyz_setUseSingleCameraTransform(SupervoxelClustering<PointXYZ>* ptr, int value)
{ ptr->setUseSingleCameraTransform(value); }

EXPORT(void) segmentation_supervoxelclustering_xyz_setVoxelResolution(SupervoxelClustering<PointXYZ>* ptr, float value)
{ ptr->setVoxelResolution(value); }
EXPORT(float) segmentation_supervoxelclustering_xyz_getVoxelResolution(SupervoxelClustering<PointXYZ>* ptr)
{ return ptr->getVoxelResolution(); }

EXPORT(void) segmentation_supervoxelclustering_xyz_setSeedResolution(SupervoxelClustering<PointXYZ>* ptr, float value)
{ ptr->setSeedResolution(value); }
EXPORT(float) segmentation_supervoxelclustering_xyz_getSeedResolution(SupervoxelClustering<PointXYZ>* ptr)
{ return ptr->getSeedResolution(); }

#ifdef __cplusplus  
}
#endif  
