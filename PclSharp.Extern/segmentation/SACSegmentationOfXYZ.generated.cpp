// Code generated by a template
#pragma once
#include "..\export.h"

#include "pcl\point_types.h"
#include <pcl/segmentation/sac_segmentation.h>

using namespace pcl;
using namespace std;

typedef boost::shared_ptr<PointCloud<PointXYZ>> boost_cloud;
typedef boost::shared_ptr<vector<int>> boost_indices;

#ifdef __cplusplus
extern "C" {
#endif 

EXPORT(SACSegmentation<PointXYZ>*) segmentation_sacsegmentation_xyz_ctor(bool random)
{
	return new SACSegmentation<PointXYZ>(random);
}

EXPORT(void) segmentation_sacsegmentation_xyz_delete(SACSegmentation<PointXYZ>** ptr)
{
	delete *ptr;
	*ptr = NULL;
}

EXPORT(void) segmentation_sacsegmentation_xyz_setInputCloud(SACSegmentation<PointXYZ>* ptr, PointCloud<PointXYZ>* cloud)
{
	ptr->setInputCloud(boost_cloud(boost_cloud(), cloud));
}

EXPORT(void) segmentation_sacsegmentation_xyz_setIndices(SACSegmentation<PointXYZ>* ptr, std::vector<int>* indices)
{ ptr->setIndices(boost_indices(boost_indices(), indices)); }

EXPORT(void) segmentation_sacsegmentation_xyz_segment(SACSegmentation<PointXYZ>* ptr, PointIndices* inliers, ModelCoefficients* coefficients)
{
	ptr->segment(*inliers, *coefficients);
}

EXPORT(void) segmentation_sacsegmentation_xyz_setOptimizeCoefficients(SACSegmentation<PointXYZ>* ptr, int value)
{ ptr->setOptimizeCoefficients(value); }
EXPORT(int) segmentation_sacsegmentation_xyz_getOptimizeCoefficients(SACSegmentation<PointXYZ>* ptr)
{ return ptr->getOptimizeCoefficients(); }

EXPORT(void) segmentation_sacsegmentation_xyz_setModelType(SACSegmentation<PointXYZ>* ptr, int value)
{ ptr->setModelType(value); }
EXPORT(int) segmentation_sacsegmentation_xyz_getModelType(SACSegmentation<PointXYZ>* ptr)
{ return ptr->getModelType(); }

EXPORT(void) segmentation_sacsegmentation_xyz_setMaxIterations(SACSegmentation<PointXYZ>* ptr, int value)
{ ptr->setMaxIterations(value); }
EXPORT(int) segmentation_sacsegmentation_xyz_getMaxIterations(SACSegmentation<PointXYZ>* ptr)
{ return ptr->getMaxIterations(); }

EXPORT(void) segmentation_sacsegmentation_xyz_setMethodType(SACSegmentation<PointXYZ>* ptr, int value)
{ ptr->setMethodType(value); }
EXPORT(int) segmentation_sacsegmentation_xyz_getMethodType(SACSegmentation<PointXYZ>* ptr)
{ return ptr->getMethodType(); }

EXPORT(void) segmentation_sacsegmentation_xyz_setDistanceThreshold(SACSegmentation<PointXYZ>* ptr, double value)
{ ptr->setDistanceThreshold(value); }
EXPORT(double) segmentation_sacsegmentation_xyz_getDistanceThreshold(SACSegmentation<PointXYZ>* ptr)
{ return ptr->getDistanceThreshold(); }

#ifdef __cplusplus  
}
#endif  
