// Code generated by a template
#pragma once
#include "..\export.h"

#include "pcl\point_types.h"
#include <pcl/segmentation/supervoxel_clustering.h>

using namespace pcl;
using namespace std;

typedef boost::shared_ptr<PointCloud<PointXYZRGBA>> boost_cloud;
typedef map<uint32_t, Supervoxel<PointXYZRGBA>::Ptr> SupervoxelClusters;

#ifdef __cplusplus
extern "C" {
#endif 

EXPORT(SupervoxelClusters*) segmentation_supervoxelclusters_xyzrgba_ctor()
{
	return new SupervoxelClusters();
}

EXPORT(void) segmentation_supervoxelclusters_xyzrgba_delete(map<uint32_t, Supervoxel<PointXYZRGBA>::Ptr>** ptr)
{
	delete *ptr;
	*ptr = NULL;
}

EXPORT(Supervoxel<PointXYZRGBA>*) segmentation_supervoxelclusters_xyzrgba_at(map<uint32_t, Supervoxel<PointXYZRGBA>::Ptr>* ptr, uint32_t key)
{ return ptr->at(key).get(); }

EXPORT(int) segmentation_supervoxelclusters_xyzrgba_count(map<uint32_t, Supervoxel<PointXYZRGBA>::Ptr>* ptr)
{ return ptr->size(); }

#ifdef __cplusplus  
}
#endif  
