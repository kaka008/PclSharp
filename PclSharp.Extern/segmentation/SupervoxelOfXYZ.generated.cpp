// Code generated by a template
#pragma once
#include "..\export.h"

#include "pcl\point_types.h"
#include <pcl/segmentation/supervoxel_clustering.h>

using namespace pcl;
using namespace std;

typedef boost::shared_ptr<PointCloud<PointXYZ>> boost_cloud;

#ifdef __cplusplus
extern "C" {
#endif 

EXPORT(Supervoxel<PointXYZ>*) segmentation_supervoxel_xyz_ctor()
{
	return new Supervoxel<PointXYZ>();
}

EXPORT(void) segmentation_supervoxel_xyz_delete(Supervoxel<PointXYZ>** ptr)
{
	delete *ptr;
	*ptr = NULL;
}

EXPORT(void) segmentation_supervoxel_xyz_setNormal(Supervoxel<PointXYZ>* ptr, Normal* value)
{ 
	//the value needs to be aligned to be pushed into the cloud, so do that.
	Normal deref;
	memcpy(&deref, value, sizeof(Normal));
	ptr->normal_ = deref; 
}
EXPORT(Normal*) segmentation_supervoxel_xyz_getNormal(Supervoxel<PointXYZ>* ptr)
{ return &ptr->normal_; }

EXPORT(PointXYZRGBA*) segmentation_supervoxel_xyz_getCentroid(Supervoxel<PointXYZ>* ptr)
{ return &ptr->centroid_; }
EXPORT(void) segmentation_supervoxel_xyz_setCentroid(Supervoxel<PointXYZ>* ptr, PointXYZRGBA* value)
{ 
	//the value needs to be aligned to be pushed into the cloud, so do that.
	PointXYZRGBA deref;
	memcpy(&deref, value, sizeof(PointXYZRGBA));
	ptr->centroid_ = deref; 
}

EXPORT(PointCloud<PointXYZ>*) segmentation_supervoxel_xyz_getVoxels(Supervoxel<PointXYZ>* ptr)
{ return ptr->voxels_.get(); }

EXPORT(PointCloud<Normal>*) segmentation_supervoxel_xyz_getNormals(Supervoxel<PointXYZ>* ptr)
{ return ptr->normals_.get(); }

#ifdef __cplusplus  
}
#endif  
