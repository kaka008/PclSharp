// Code generated by a template
#pragma once
#include "..\export.h"

#include "pcl\point_types.h"
#include <pcl/segmentation/extract_clusters.h>

using namespace pcl;
using namespace std;

typedef std::shared_ptr<PointCloud<PointXYZ>> std_cloud;
typedef std::shared_ptr<pcl::search::Search<PointXYZ>> search_ptr;
typedef std::shared_ptr<vector<int>> std_indices;

#ifdef __cplusplus
extern "C" {
#endif 

EXPORT(EuclideanClusterExtraction<PointXYZ>*) segmentation_euclideanclusterextraction_xyz_ctor()
{
	return new EuclideanClusterExtraction<PointXYZ>();
}

EXPORT(void) segmentation_euclideanclusterextraction_xyz_delete(EuclideanClusterExtraction<PointXYZ>** ptr)
{
	delete *ptr;
	*ptr = NULL;
}

EXPORT(void) segmentation_euclideanclusterextraction_xyz_setInputCloud(EuclideanClusterExtraction<PointXYZ>* ptr, PointCloud<PointXYZ>* cloud)
{
	ptr->setInputCloud(std_cloud(std_cloud(), cloud));
}

EXPORT(void) segmentation_euclideanclusterextraction_xyz_setIndices(EuclideanClusterExtraction<PointXYZ>* ptr, std::vector<int>* indices)
{ ptr->setIndices(std_indices(std_indices(), indices)); }

EXPORT(void) segmentation_euclideanclusterextraction_xyz_setSearchMethod(EuclideanClusterExtraction<PointXYZ>* ptr, pcl::search::Search<PointXYZ>* search)
{
	ptr->setSearchMethod(search_ptr(search_ptr(), search));
}

EXPORT(void) segmentation_euclideanclusterextraction_xyz_extract(EuclideanClusterExtraction<PointXYZ>* ptr, vector<PointIndices>* clusters)
{
	ptr->extract(*clusters);
}

EXPORT(void) segmentation_euclideanclusterextraction_xyz_setClusterTolerance(EuclideanClusterExtraction<PointXYZ>* ptr, double value)
{ ptr->setClusterTolerance(value); }
EXPORT(double) segmentation_euclideanclusterextraction_xyz_getClusterTolerance(EuclideanClusterExtraction<PointXYZ>* ptr)
{ return ptr->getClusterTolerance(); }

EXPORT(void) segmentation_euclideanclusterextraction_xyz_setMinClusterSize(EuclideanClusterExtraction<PointXYZ>* ptr, int value)
{ ptr->setMinClusterSize(value); }
EXPORT(int) segmentation_euclideanclusterextraction_xyz_getMinClusterSize(EuclideanClusterExtraction<PointXYZ>* ptr)
{ return ptr->getMinClusterSize(); }

EXPORT(void) segmentation_euclideanclusterextraction_xyz_setMaxClusterSize(EuclideanClusterExtraction<PointXYZ>* ptr, int value)
{ ptr->setMaxClusterSize(value); }
EXPORT(int) segmentation_euclideanclusterextraction_xyz_getMaxClusterSize(EuclideanClusterExtraction<PointXYZ>* ptr)
{ return ptr->getMaxClusterSize(); }

#ifdef __cplusplus  
}
#endif  
