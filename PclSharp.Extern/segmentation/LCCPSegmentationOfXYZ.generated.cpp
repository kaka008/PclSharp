// Code generated by a template
#pragma once
#include "..\export.h"

#include "pcl\point_types.h"
#include <pcl/segmentation/lccp_segmentation.h>

using namespace pcl;
using namespace std;

#ifdef __cplusplus
extern "C" {
#endif 

EXPORT(LCCPSegmentation<PointXYZ>*) segmentation_lccpsegmentation_xyz_ctor()
{ return new LCCPSegmentation<PointXYZ>(); }

EXPORT(void) segmentation_lccpsegmentation_xyz_delete(LCCPSegmentation<PointXYZ>** ptr)
{
	delete *ptr;
	*ptr = NULL;
}

EXPORT(void) segmentation_lccpsegmentation_xyz_setInputSupervoxels(LCCPSegmentation<PointXYZ>* ptr, map<uint32_t, Supervoxel<PointXYZ>::Ptr>* clusters, multimap< uint32_t, uint32_t >* labelAdjacency)
{ ptr->setInputSupervoxels(*clusters, *labelAdjacency); }

EXPORT(void) segmentation_lccpsegmentation_xyz_segment(LCCPSegmentation<PointXYZ>* ptr)
{ ptr->segment(); }

EXPORT(void) segmentation_lccpsegmentation_xyz_reset(LCCPSegmentation<PointXYZ>* ptr)
{ ptr->reset(); }

EXPORT(void) segmentation_lccpsegmentation_xyz_relabelCloud(LCCPSegmentation<PointXYZ>* ptr, PointCloud<PointXYZL>* labeledCloud)
{ ptr->relabelCloud(*labeledCloud); }

EXPORT(void) segmentation_lccpsegmentation_xyz_setSmoothnessCheck(LCCPSegmentation<PointXYZ>* ptr, int useSmoothness, float voxelRes, float seedRes, float smoothnessThreshold)
{ ptr->setSmoothnessCheck(useSmoothness, voxelRes, seedRes, smoothnessThreshold); }

EXPORT(void) segmentation_lccpsegmentation_xyz_setConcavityToleranceThreshold(LCCPSegmentation<PointXYZ>* ptr, float value)
{ ptr->setConcavityToleranceThreshold(value); }
EXPORT(float) segmentation_lccpsegmentation_xyz_getConcavityToleranceThreshold(LCCPSegmentation<PointXYZ>* ptr)
{ return ptr->getConcavityToleranceThreshold(); }

EXPORT(void) segmentation_lccpsegmentation_xyz_setKFactor(LCCPSegmentation<PointXYZ>* ptr, int kfactor)
{ ptr->setKFactor(kfactor); }

EXPORT(void) segmentation_lccpsegmentation_xyz_setMinSegmentSize(LCCPSegmentation<PointXYZ>* ptr, int minSegmentSize)
{ ptr->setMinSegmentSize(minSegmentSize); }

EXPORT(void) segmentation_lccpsegmentation_xyz_setSanityCheck(LCCPSegmentation<PointXYZ>* ptr, int useSanity)
{ ptr->setSanityCheck(useSanity); }

#ifdef __cplusplus  
}
#endif  
