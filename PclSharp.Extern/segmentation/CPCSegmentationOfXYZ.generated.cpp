// Code generated by a template
#pragma once
#include "..\export.h"

#include "pcl\point_types.h"
#include <pcl/segmentation/cpc_segmentation.h>

using namespace pcl;
using namespace std;

#ifdef __cplusplus
extern "C" {
#endif 

EXPORT(CPCSegmentation<PointXYZ>*) segmentation_cpcsegmentation_xyz_ctor()
{ return new CPCSegmentation<PointXYZ>(); }

EXPORT(void) segmentation_cpcsegmentation_xyz_delete(CPCSegmentation<PointXYZ>** ptr)
{
	delete *ptr;
	*ptr = NULL;
}

EXPORT(void) segmentation_cpcsegmentation_xyz_setInputSupervoxels(CPCSegmentation<PointXYZ>* ptr, map<uint32_t, Supervoxel<PointXYZ>::Ptr>* clusters, multimap< uint32_t, uint32_t >* labelAdjacency)
{ ptr->setInputSupervoxels(*clusters, *labelAdjacency); }

EXPORT(void) segmentation_cpcsegmentation_xyz_segment(CPCSegmentation<PointXYZ>* ptr)
{ ptr->segment(); }

EXPORT(void) segmentation_cpcsegmentation_xyz_reset(CPCSegmentation<PointXYZ>* ptr)
{ ptr->reset(); }

EXPORT(void) segmentation_cpcsegmentation_xyz_setCutting(CPCSegmentation<PointXYZ>* ptr, uint32_t maxCuts, uint32_t cuttingMinSegments, float cuttingMinScore, int locallyConstrained, int directedCutting, int cleanCutting)
{ ptr->setCutting(maxCuts, cuttingMinSegments, cuttingMinScore, locallyConstrained, directedCutting, cleanCutting); }

EXPORT(void) segmentation_cpcsegmentation_xyz_relabelCloud(CPCSegmentation<PointXYZ>* ptr, PointCloud<PointXYZL>* labeledCloud)
{ ptr->relabelCloud(*labeledCloud); }

EXPORT(void) segmentation_cpcsegmentation_xyz_setSmoothnessCheck(CPCSegmentation<PointXYZ>* ptr, int useSmoothness, float voxelRes, float seedRes, float smoothnessThreshold)
{ ptr->setSmoothnessCheck(useSmoothness, voxelRes, seedRes, smoothnessThreshold); }

EXPORT(void) segmentation_cpcsegmentation_xyz_setConcavityToleranceThreshold(CPCSegmentation<PointXYZ>* ptr, float value)
{ ptr->setConcavityToleranceThreshold(value); }
EXPORT(float) segmentation_cpcsegmentation_xyz_getConcavityToleranceThreshold(CPCSegmentation<PointXYZ>* ptr)
{ return ptr->getConcavityToleranceThreshold(); }

EXPORT(void) segmentation_cpcsegmentation_xyz_setKFactor(CPCSegmentation<PointXYZ>* ptr, int kfactor)
{ ptr->setKFactor(kfactor); }

EXPORT(void) segmentation_cpcsegmentation_xyz_setMinSegmentSize(CPCSegmentation<PointXYZ>* ptr, int minSegmentSize)
{ ptr->setMinSegmentSize(minSegmentSize); }

EXPORT(void) segmentation_cpcsegmentation_xyz_setSanityCheck(CPCSegmentation<PointXYZ>* ptr, int useSanity)
{ ptr->setSanityCheck(useSanity); }

EXPORT(void) segmentation_cpcsegmentation_xyz_setRANSACIterations(CPCSegmentation<PointXYZ>* ptr, uint32_t value)
{ ptr->setRANSACIterations(value); }

#ifdef __cplusplus  
}
#endif  
