// Code generated by a template
#pragma once
#include "..\export.h"
#include<Eigen/Core>

using namespace Eigen;

#ifdef __cplusplus
extern "C" {
#endif

EXPORT(VectorXf*) eigen_vectorx_f_ctor(int count)
{
	if (count == 0)
		return new VectorXf();
	else
		return new VectorXf(count);
}

EXPORT(void) eigen_vectorx_f_delete(VectorXf** ptr)
{
	delete *ptr;
	*ptr = NULL;
}

EXPORT(void) eigen_vectorx_f_resize(VectorXf* ptr, int count)
{ ptr->resize(count); }

EXPORT(void) eigen_vectorx_f_normalize(VectorXf* ptr)
{ ptr->normalize(); }

EXPORT(void) eigen_vectorx_f_setIndex(VectorXf* ptr, int idx, float value)
{ ptr->operator[](idx) = value; }
EXPORT(float) eigen_vectorx_f_getIndex(VectorXf* ptr, int idx)
{ return ptr->operator[](idx); }

EXPORT(int) eigen_vectorx_f_count(VectorXf* ptr)
{ return ptr->size(); }

EXPORT(float*) eigen_vectorx_f_data(VectorXf* ptr)
{ return ptr->data(); }

#ifdef __cplusplus  
}
#endif
