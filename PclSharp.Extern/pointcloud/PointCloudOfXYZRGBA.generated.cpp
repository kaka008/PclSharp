// Code generated by a template
#pragma once
#include "..\export.h"

#include "pcl\pcl_base.h"
#include "pcl\point_types.h"

using namespace pcl;
using namespace std;

typedef vector<PointXYZRGBA, Eigen::aligned_allocator<PointXYZRGBA>> point_vector;

#ifdef __cplusplus  
extern "C" {  // only need to export C interface if  
			  // used by C++ source code  
#endif  

EXPORT(PointCloud<PointXYZRGBA>*) pointcloud_xyzrgba_ctor()
{
	return new PointCloud<PointXYZRGBA>();
}

EXPORT(PointCloud<PointXYZRGBA>*) pointcloud_xyzrgba_ctor_wh(uint32_t width, uint32_t height)
{
	return new PointCloud<PointXYZRGBA>(width, height);
}

EXPORT(PointCloud<PointXYZRGBA>*) pointcloud_xyzrgba_ctor_indices(PointCloud<PointXYZRGBA>* cloud, vector<int>* indices)
{
	if (indices == NULL)
		return new PointCloud<PointXYZRGBA>(*cloud);
	else
		return new PointCloud<PointXYZRGBA>(*cloud, *indices);
}

EXPORT(void) pointcloud_xyzrgba_delete(PointCloud<PointXYZRGBA>** ptr)
{
	delete *ptr;
	*ptr = NULL;
}

EXPORT(PointXYZRGBA*) pointcloud_xyzrgba_at_colrow(PointCloud<PointXYZRGBA>* ptr, int col, int row)
{
	return &ptr->at(col, row);
}

EXPORT(void) pointcloud_xyzrgba_add(PointCloud<PointXYZRGBA>* ptr, PointXYZRGBA* value)
{
	//the value needs to be aligned to be pushed into the cloud, so do that.
	PointXYZRGBA deref;
	memcpy(&deref, value, sizeof(PointXYZRGBA));
	ptr->push_back(deref);
}

EXPORT(size_t) pointcloud_xyzrgba_size(PointCloud<PointXYZRGBA>* ptr)
{
	return ptr->size();
}

EXPORT(void) pointcloud_xyzrgba_clear(PointCloud<PointXYZRGBA>* ptr)
{
	ptr->clear();
}

EXPORT(uint32_t) pointcloud_xyzrgba_width(PointCloud<PointXYZRGBA>* ptr)
{
	return ptr->width;
}

EXPORT(void) pointcloud_xyzrgba_width_set(PointCloud<PointXYZRGBA>* ptr, uint32_t width)
{
	ptr->width = width;
}

EXPORT(uint32_t) pointcloud_xyzrgba_height(PointCloud<PointXYZRGBA>* ptr)
{
	return ptr->height;
}

EXPORT(void) pointcloud_xyzrgba_height_set(PointCloud<PointXYZRGBA>* ptr, uint32_t height)
{
	ptr->height = height;
}

EXPORT(int32_t) pointcloud_xyzrgba_isOrganized(PointCloud<PointXYZRGBA>* ptr)
{
	return ptr->isOrganized();
}

EXPORT(point_vector*) pointcloud_xyzrgba_points(PointCloud<PointXYZRGBA>* ptr)
{
	return &ptr->points;
}

EXPORT(PointXYZRGBA*) pointcloud_xyzrgba_data(PointCloud<PointXYZRGBA>* ptr)
{
	return ptr->points.data();
}

EXPORT(void) pointcloud_xyzrgba_downsample(PointCloud<PointXYZRGBA>* ptr, int factor, PointCloud<PointXYZRGBA>* output)
{
	if (output->width != ptr->width/factor ||
		output->height != ptr->height/factor)
	{
		output->resize(ptr->width/factor * ptr->height/factor);
		output->width = ptr->width/factor;
		output->height = ptr->height/factor;
		output->is_dense = ptr->is_dense;
	}

	if (factor == 1)
	{
		output->points = ptr->points;
		return;
	}

	auto ow = output->width;
	auto oh = output->height;
	auto iw = ptr->width;

	auto oarr = output->points.data();
	auto iarr = ptr->points.data();

	for(size_t c = 0; c < ow; c++)
	{
		for(size_t r = 0; r < oh; r++)
		{
			oarr[r * ow + c] = iarr[r * factor * iw + c * factor];
		}
	}
}

EXPORT(void) pointcloud_xyzrgba_setIsDense(PointCloud<PointXYZRGBA>* ptr, int value)
{ ptr->is_dense = value; }
EXPORT(int) pointcloud_xyzrgba_getIsDense(PointCloud<PointXYZRGBA>* ptr)
{ return ptr->is_dense; }

#ifdef __cplusplus  
}
#endif  
