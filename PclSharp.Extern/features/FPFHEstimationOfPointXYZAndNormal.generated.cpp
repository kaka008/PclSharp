// Code generated by a template
#pragma once
#include "..\export.h"

#include "pcl\pcl_base.h"
#include "pcl\point_types.h"
#include <pcl/features/fpfh.h>

using namespace pcl;
using namespace std;

typedef FPFHEstimation<PointXYZ, Normal, FPFHSignature33> cpp_wrapper;
typedef boost::shared_ptr<PointCloud<PointXYZ>> boost_cloud;
typedef boost::shared_ptr<PointCloud<Normal>> boost_norms;
typedef boost::shared_ptr<vector<int>> boost_indices;

#ifdef __cplusplus
extern "C" {
#endif 

EXPORT(cpp_wrapper*) features_fpfhestimation_pointxyzandnormal_ctor()
{
	return new FPFHEstimation<PointXYZ, Normal, FPFHSignature33>();
}

EXPORT(void) features_fpfhestimation_pointxyzandnormal_delete(cpp_wrapper** ptr)
{
	delete *ptr;
	*ptr = NULL;
}

EXPORT(void) features_fpfhestimation_pointxyzandnormal_setInputCloud(FPFHEstimation<PointXYZ, Normal, FPFHSignature33>* ptr, PointCloud<PointXYZ>* cloud)
{ ptr->setInputCloud(boost_cloud(boost_cloud(), cloud)); }

EXPORT(void) features_fpfhestimation_pointxyzandnormal_setIndices(FPFHEstimation<PointXYZ, Normal, FPFHSignature33>* ptr, std::vector<int>* indices)
{ ptr->setIndices(boost_indices(boost_indices(), indices)); }

EXPORT(void) features_fpfhestimation_pointxyzandnormal_compute(FPFHEstimation<PointXYZ, Normal, FPFHSignature33>* ptr, PointCloud<FPFHSignature33>* cloud)
{ ptr->compute(*cloud); }

EXPORT(void) features_fpfhestimation_pointxyzandnormal_setInputNormals(FPFHEstimation<PointXYZ, Normal, FPFHSignature33>* ptr, PointCloud<Normal>* normals)
{ ptr->setInputNormals(boost_norms(boost_norms(), normals)); }

EXPORT(void) features_fpfhestimation_pointxyzandnormal_setKSearch(FPFHEstimation<PointXYZ, Normal, FPFHSignature33>* ptr, int value)
{ ptr->setKSearch(value); }
EXPORT(int) features_fpfhestimation_pointxyzandnormal_getKSearch(FPFHEstimation<PointXYZ, Normal, FPFHSignature33>* ptr)
{ return ptr->getKSearch(); }
EXPORT(void) features_fpfhestimation_pointxyzandnormal_setRadiusSearch(FPFHEstimation<PointXYZ, Normal, FPFHSignature33>* ptr, double value)
{ ptr->setRadiusSearch(value); }
EXPORT(double) features_fpfhestimation_pointxyzandnormal_getRadiusSearch(FPFHEstimation<PointXYZ, Normal, FPFHSignature33>* ptr)
{ return ptr->getRadiusSearch(); }

EXPORT(void) features_fpfhestimation_pointxyzandnormal_getNrSubdivisions(FPFHEstimation<PointXYZ, Normal, FPFHSignature33>* ptr, int* f1, int* f2, int* f3)
{ ptr->getNrSubdivisions(*f1, *f2, *f3); }
EXPORT(void) features_fpfhestimation_pointxyzandnormal_setNrSubdivisions(FPFHEstimation<PointXYZ, Normal, FPFHSignature33>* ptr, int f1, int f2, int f3)
{ ptr->setNrSubdivisions(f1, f2, f3); }

#ifdef __cplusplus  
}
#endif  
