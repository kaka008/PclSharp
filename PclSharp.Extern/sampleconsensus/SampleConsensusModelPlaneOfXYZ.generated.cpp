// Code generated by a template
#pragma once
#include "..\export.h"

#include "pcl\pcl_base.h"
#include "pcl\point_types.h"
#include "pcl\sample_consensus\sac_model_plane.h"

using namespace pcl;
using namespace std;

typedef SampleConsensusModelPlane<PointXYZ> sac_plane;
typedef boost::shared_ptr<PointCloud<PointXYZ>> boost_cloud;

#ifdef __cplusplus  
extern "C" {  // only need to export C interface if  
			  // used by C++ source code  
#endif  

EXPORT(SampleConsensusModelPlane<PointXYZ>*) sampleconsensusmodel_plane_xyz_ctor_indices(PointCloud<PointXYZ>* cloud, vector<int>* indices, bool random)
{
	if (indices)
		return new SampleConsensusModelPlane<PointXYZ>(boost_cloud(boost_cloud(), cloud), *indices, random);
	else
		return new SampleConsensusModelPlane<PointXYZ>(boost_cloud(boost_cloud(), cloud), random);
}

EXPORT(void) sampleconsensusmodel_plane_xyz_delete(SampleConsensusModelPlane<PointXYZ>** ptr)
{
	delete *ptr;
	*ptr = NULL;
}

EXPORT(void) sampleconsensusmodel_plane_xyz_setIndices(SampleConsensusModelPlane<PointXYZ>* ptr, vector<int>* indices)
{ ptr->setIndices(*indices); }

EXPORT(void) sampleconsensusmodel_plane_xyz_setInputCloud(SampleConsensusModelPlane<PointXYZ>* ptr, PointCloud<PointXYZ>* cloud)
{ ptr->setInputCloud(boost_cloud(boost_cloud(), cloud)); }

EXPORT(void) sampleconsensusmodel_plane_xyz_selectWithinDistance(SampleConsensusModelPlane<PointXYZ>* ptr, Eigen::VectorXf* modelCoefficients, double distance, vector<int>* inliers)
{ ptr-> selectWithinDistance(*modelCoefficients, distance, *inliers); }

EXPORT(void) sampleconsensusmodel_plane_xyz_getSamples(SampleConsensusModelPlane<PointXYZ>* ptr, int iterations, vector<int>* samples)
{
	ptr->getSamples(iterations, *samples);
}

EXPORT(void) sampleconsensusmodel_plane_xyz_optimizeModelCoefficients(SampleConsensusModelPlane<PointXYZ>* ptr, vector<int>* inliers, Eigen::VectorXf* modelCoefficients, Eigen::VectorXf* optimizedCoefficients)
{
	ptr->optimizeModelCoefficients(*inliers, *modelCoefficients, *optimizedCoefficients);
}

EXPORT(int) sampleconsensusmodel_plane_xyz_computeModelCoefficients(SampleConsensusModelPlane<PointXYZ>* ptr, vector<int>* samples, Eigen::VectorXf* modelCoefficients)
{ return ptr->computeModelCoefficients(*samples, *modelCoefficients); }

#ifdef __cplusplus  
}
#endif  
