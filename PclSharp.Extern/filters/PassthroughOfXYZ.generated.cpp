// Code generated by a template
#pragma once
#include "..\export.h"

#include "pcl\pcl_base.h"
#include "pcl\point_types.h"
#include <pcl/filters/passthrough.h>
#include <comdef.h>
#include <comutil.h>

using namespace pcl;
using namespace std;

typedef PassThrough<PointXYZ> filter_t;
typedef std::shared_ptr<PointCloud<PointXYZ>> std_cloud;

#ifdef __cplusplus
extern "C" {
#endif 

EXPORT(filter_t*) filters_passThrough_xyz_ctor(bool extractRemovedIndices)
{
	return new filter_t(extractRemovedIndices);
}

EXPORT(void) filters_passThrough_xyz_delete(filter_t** ptr)
{
	delete *ptr;
	*ptr = NULL;
}

EXPORT(void) filters_passThrough_xyz_filter(PassThrough<PointXYZ>* ptr, PointCloud<PointXYZ>* output)
{
	ptr->filter(*output);
}

EXPORT(void) filters_passThrough_xyz_setInputCloud(PassThrough<PointXYZ>* ptr, PointCloud<PointXYZ>* cloud)
{
	ptr->setInputCloud(std_cloud(std_cloud(), cloud));
}

EXPORT(void) filters_passThrough_xyz_setIndices(PassThrough<PointXYZ>* ptr, vector<int>* indices)
{
	ptr->setIndices(std::shared_ptr<vector<int>>(std::shared_ptr<vector<int>>(), indices));
}
EXPORT(void) filters_passThrough_xyz_setFilterLimits(PassThrough<PointXYZ>* ptr, float limit_min,float limit_max)
{
	ptr->setFilterLimits(limit_min,limit_max);
}
EXPORT(void) filters_passThrough_xyz_getFilterLimits(PassThrough<PointXYZ>* ptr, float &limit_min,float &limit_max)
{
	ptr->getFilterLimits(limit_min,limit_max);
}
EXPORT(void) filters_passThrough_xyz_setFilterFieldName(PassThrough<PointXYZ>* ptr, char *filterFieldName)
{
	ptr->setFilterFieldName(filterFieldName);
}
EXPORT(BSTR) filters_passThrough_xyz_getFilterFieldName(PassThrough<PointXYZ>* ptr)
{
    return  _com_util::ConvertStringToBSTR(ptr->getFilterFieldName().c_str());
}


/*EXPORT(void) filters_passThrough_xyz_setFilterFieldName(PassThrough<PointXYZ>* ptr, string value)
{ ptr->setFilterFieldName(value); }
EXPORT(string) filters_passThrough_xyz_getFilterFieldName(PassThrough<PointXYZ>* ptr)
{ return ptr->getFilterFieldName(); }*/

EXPORT(void) filters_passThrough_xyz_setFilterLimitsNegative(PassThrough<PointXYZ>* ptr, bool value)
{ ptr->setFilterLimitsNegative(value); }
EXPORT(bool) filters_passThrough_xyz_getFilterLimitsNegative(PassThrough<PointXYZ>* ptr)
{ return ptr->getFilterLimitsNegative(); }

EXPORT(void) filters_passThrough_xyz_setKeepOrganized(PassThrough<PointXYZ>* ptr, int value)
{ ptr->setKeepOrganized(value); }
EXPORT(int) filters_passThrough_xyz_getKeepOrganized(PassThrough<PointXYZ>* ptr)
{ return ptr->getKeepOrganized(); }

EXPORT(void) filters_passThrough_xyz_setNegative(PassThrough<PointXYZ>* ptr, int value)
{ ptr->setNegative(value); }
EXPORT(int) filters_passThrough_xyz_getNegative(PassThrough<PointXYZ>* ptr)
{ return ptr->getNegative(); }

#ifdef __cplusplus  
}
#endif  
