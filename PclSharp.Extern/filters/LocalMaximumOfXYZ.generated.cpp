// Code generated by a template
#pragma once
#include "..\export.h"

#include "pcl\pcl_base.h"
#include "pcl\point_types.h"
#include <pcl/filters/local_maximum.h>

using namespace pcl;
using namespace std;

typedef LocalMaximum<PointXYZ> filter_t;
typedef std::shared_ptr<PointCloud<PointXYZ>> std_cloud;

#ifdef __cplusplus
extern "C" {
#endif 

EXPORT(filter_t*) filters_LocalMaximum_xyz_ctor(bool extractRemovedIndices)
{
	return new filter_t(extractRemovedIndices);
}

EXPORT(void) filters_LocalMaximum_xyz_delete(filter_t** ptr)
{
	delete *ptr;
	*ptr = NULL;
}

EXPORT(void) filters_LocalMaximum_xyz_filter(LocalMaximum<PointXYZ>* ptr, PointCloud<PointXYZ>* output)
{
	ptr->filter(*output);
}

EXPORT(void) filters_LocalMaximum_xyz_setInputCloud(LocalMaximum<PointXYZ>* ptr, PointCloud<PointXYZ>* cloud)
{
	ptr->setInputCloud(std_cloud(std_cloud(), cloud));
}

EXPORT(void) filters_LocalMaximum_xyz_setIndices(LocalMaximum<PointXYZ>* ptr, vector<int>* indices)
{
	ptr->setIndices(std::shared_ptr<vector<int>>(std::shared_ptr<vector<int>>(), indices));
}


EXPORT(void) filters_LocalMaximum_xyz_setRadius(LocalMaximum<PointXYZ>* ptr, float value)
{ ptr->setRadius(value); }
EXPORT(float) filters_LocalMaximum_xyz_getRadius(LocalMaximum<PointXYZ>* ptr)
{ return ptr->getRadius(); }

EXPORT(void) filters_LocalMaximum_xyz_setKeepOrganized(LocalMaximum<PointXYZ>* ptr, int value)
{ ptr->setKeepOrganized(value); }
EXPORT(int) filters_LocalMaximum_xyz_getKeepOrganized(LocalMaximum<PointXYZ>* ptr)
{ return ptr->getKeepOrganized(); }

EXPORT(void) filters_LocalMaximum_xyz_setNegative(LocalMaximum<PointXYZ>* ptr, int value)
{ ptr->setNegative(value); }
EXPORT(int) filters_LocalMaximum_xyz_getNegative(LocalMaximum<PointXYZ>* ptr)
{ return ptr->getNegative(); }

#ifdef __cplusplus  
}
#endif  
