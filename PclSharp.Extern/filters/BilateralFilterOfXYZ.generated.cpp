// Code generated by a template
#pragma once
#include "..\export.h"

#include "pcl\pcl_base.h"
#include "pcl\point_types.h"
#include <pcl/filters/bilateral.h>

using namespace pcl;
using namespace std;

typedef BilateralFilter<PointXYZ> filter_t;
typedef std::shared_ptr<PointCloud<PointXYZ>> std_cloud;
typedef typename std::shared_ptr<pcl::search::Search<pcl::PointXYZ>> KdTreePtr;

#ifdef __cplusplus
extern "C" {
#endif 

/*EXPORT(filter_t*) filters_bilateralFilter_xyz_ctor()
{
	return new filter_t();
}*/

EXPORT(void) filters_bilateralFilter_xyz_delete(filter_t** ptr)
{
	delete *ptr;
	*ptr = NULL;
}

EXPORT(void) filters_bilateralFilter_xyz_filter(BilateralFilter<PointXYZ>* ptr, PointCloud<PointXYZ>* output)
{
	ptr->filter(*output);
}

EXPORT(void) filters_bilateralFilter_xyz_setInputCloud(BilateralFilter<PointXYZ>* ptr, PointCloud<PointXYZ>* cloud)
{
	ptr->setInputCloud(std_cloud(std_cloud(), cloud));
}
EXPORT(void) filters_bilateralFilter_xyz_setIndices(BilateralFilter<PointXYZ>* ptr, vector<int>* indices)
{
	ptr->setIndices(std::shared_ptr<vector<int>>(std::shared_ptr<vector<int>>(), indices));
}
/*EXPORT(double) filters_bilateralFilter_xyz_computePointWeight(BilateralFilter<PointXYZ>* ptr, const int &pid,const vector<int> &indices,const vector<float> &distance)
{
	return ptr->computePointWeight(pid,indices,distance);
}*/
EXPORT(void) filters_bilateralFilter_xyz_setSearchMethod(BilateralFilter<PointXYZ>* ptr, const KdTreePtr &tree)
{
	ptr->setSearchMethod(tree);
}

EXPORT(void) filters_bilateralFilter_xyz_setHalfSize(BilateralFilter<PointXYZ>* ptr, double value)
{ ptr->setHalfSize(value); }
EXPORT(double) filters_bilateralFilter_xyz_getHalfSize(BilateralFilter<PointXYZ>* ptr)
{ return ptr->getHalfSize(); }

EXPORT(void) filters_bilateralFilter_xyz_setStdDev(BilateralFilter<PointXYZ>* ptr, double value)
{ ptr->setStdDev(value); }
EXPORT(double) filters_bilateralFilter_xyz_getStdDev(BilateralFilter<PointXYZ>* ptr)
{ return ptr->getStdDev(); }


#ifdef __cplusplus  
}
#endif  
