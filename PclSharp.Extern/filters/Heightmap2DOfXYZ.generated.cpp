// Code generated by a template
#pragma once
#include "..\export.h"

#include <pcl/pcl_base.h>
#include <pcl/point_types.h>
#include "Heightmap2D.hpp"

using namespace pcl;
using namespace std;
using namespace pcl::filters;

typedef boost::shared_ptr<PointCloud<PointXYZ>> boost_cloud;

#ifdef __cplusplus
extern "C" {
#endif 

EXPORT(HeightMap2D<PointXYZ>*) filters_heightmap2d_xyz_ctor()
{
	return new HeightMap2D<PointXYZ>();
}

EXPORT(void) filters_heightmap2d_xyz_delete(HeightMap2D<PointXYZ>** ptr)
{
	delete *ptr;
	*ptr = NULL;
}

EXPORT(void) filters_heightmap2d_xyz_filter(HeightMap2D<PointXYZ>* ptr)
{
	ptr->filter();
}

EXPORT(void) filters_heightmap2d_xyz_setInputCloud(HeightMap2D<PointXYZ>* ptr, PointCloud<PointXYZ>* cloud)
{
	ptr->setInputCloud(boost_cloud(boost_cloud(), cloud));
}

EXPORT(void) filters_heightmap2d_xyz_setIndices(HeightMap2D<PointXYZ>* ptr, vector<int>* indices)
{
	ptr->setIndices(boost::shared_ptr<vector<int>>(boost::shared_ptr<vector<int>>(), indices));
}

EXPORT(vector<int>*) filters_heightmap2d_xyz_getMaximaCloudIndicesFiltered(HeightMap2D<PointXYZ>* ptr)
{ return &ptr->getMaximaCloudIndicesFiltered(); }

EXPORT(int) filters_heightmap2d_xyz_getMaximaNumberAfterFiltering(HeightMap2D<PointXYZ>* ptr)
{ return ptr->getMaximaNumberAfterFiltering(); }

EXPORT(void) filters_heightmap2d_xyz_setGroundCoeffs(HeightMap2D<PointXYZ>* ptr, Eigen::VectorXf* coeffs)
{ ptr->setGroundCoeffs(*coeffs); }

EXPORT(void) filters_heightmap2d_xyz_setBinSize(HeightMap2D<PointXYZ>* ptr, float value)
{ ptr->setBinSize(value); }
EXPORT(float) filters_heightmap2d_xyz_getBinSize(HeightMap2D<PointXYZ>* ptr)
{ return ptr->getBinSize(); }

EXPORT(void) filters_heightmap2d_xyz_setMinDistBetweenMaxima(HeightMap2D<PointXYZ>* ptr, float value)
{ ptr->setMinDistBetweenMaxima(value); }
EXPORT(float) filters_heightmap2d_xyz_getMinDistBetweenMaxima(HeightMap2D<PointXYZ>* ptr)
{ return ptr->getMinDistBetweenMaxima(); }

#ifdef __cplusplus  
}
#endif  
